/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/venues/{outletAuthKey}': {
    /**
     * Venues
     * @description Get venue information
     */
    get: operations['getVenue'];
  };
  '/trophies/{outletAuthKey}': {
    /**
     * Trophies
     * @description Get Trophies
     */
    get: operations['getTrophies'];
  };
  '/transfers/{outletAuthKey}': {
    /**
     * Transfers
     * @description GET transfers information according to specified parameter values
     */
    get: operations['getTransfers'];
  };
  '/tournamentschedule/{outletAuthKey}': {
    /**
     * Tournament Schedule
     * @description Get tournament schedule
     */
    get: operations['getTournamentSchedule'];
  };
  '/tournamentschedule/{outletAuthKey}/{tournamentCalendarUuid}': {
    /**
     * Tournament Schedule
     * @description Get tournament schedule
     */
    get: operations['getTournamentSchedule_1'];
  };
  '/tournamentcalendar/{outletAuthKey}': {
    /**
     * Tournament Calendars
     * @description GET a list of Tournament Calendars
     */
    get: operations['getTournamentCalendars'];
  };
  '/tournamentcalendar/{outletAuthKey}/{type}': {
    /**
     * Tournament Calendars
     * @description GET a list of Tournament Calendars
     */
    get: operations['getTournamentCalendars_1'];
  };
  '/tournamentcalendar/{outletAuthKey}/{type1}/{type2}': {
    /**
     * Tournament Calendars
     * @description GET a list of Tournament Calendars
     */
    get: operations['getTournamentCalendars_2'];
  };
  '/topperformers/{outletAuthKey}': {
    /**
     * Top performers
     * @description Get top performers ranking data
     */
    get: operations['getTopPerformers'];
  };
  '/topperformers/{outletAuthKey}/{tournamentCalendarUuid}': {
    /**
     * Top performers
     * @description Get top performers ranking data
     */
    get: operations['getTopPerformers_1'];
  };
  '/teamplayerpredictions/{outletAuthKey}': {
    /**
     * Team and Player Forecast
     * @description Get Team and Player Forecast
     */
    get: operations['getTeamPlayerPredictions'];
  };
  '/teamplayerpredictions/{outletAuthKey}/{matchUuid}': {
    /**
     * Team and Player Forecast
     * @description Get Team and Player Forecast
     */
    get: operations['getTeamPlayerPredictionsById'];
  };
  '/team/{outletAuthKey}': {
    /**
     * Teams
     * @description GET team data according to specified parameter values.
     */
    get: operations['getTeams'];
  };
  '/team/{outletAuthKey}/{contestantId}': {
    /**
     * Teams
     * @description Get team information only for a specific contestant.
     */
    get: operations['getTeam'];
  };
  '/suspensions/{outletAuthKey}': {
    /**
     * Suspensions
     * @description Get a list of suspended players
     */
    get: operations['getSuspensions'];
  };
  '/standings/{outletAuthKey}': {
    /**
     * Team Standings
     * @description GET team standings data according to specified parameter values.
     */
    get: operations['getTeamStandings'];
  };
  '/squads/{outletAuthKey}': {
    /**
     * Squads
     * @description Get squad and individual personal information
     */
    get: operations['getSquads'];
  };
  '/seasonstats/{outletAuthKey}': {
    /**
     * Seasonal Statistics
     * @description GET seasonal statistics according to specified parameter values
     */
    get: operations['getSeasonalStats'];
  };
  '/seasonpowerrankings/{outletAuthKey}': {
    /**
     * Season Power Rankings
     * @description Get Season Power Rankings
     */
    get: operations['getSeasonPlayerRatingsById'];
  };
  '/seasonplaytime/{outletAuthKey}': {
    /**
     * Season Playtime
     * @description Get Season Playtime
     */
    get: operations['getSeasonPlayTime'];
  };
  '/seasonplaytime/{outletAuthKey}/{tournamentCalendarUuid}': {
    /**
     * Season Playtime
     * @description Get Season Playtime
     */
    get: operations['getSeasonPlayTimeById'];
  };
  '/seasonplayerratings/{outletAuthKey}': {
    /**
     * Season Player Ratings
     * @description Get Season Player Ratings
     */
    get: operations['getSeasonPlayerRatingsById_1'];
  };
  '/seasonexpectedgoals/{outletAuthKey}': {
    /**
     * Season Expected Goals
     * @description Get Season Expected Goals
     */
    get: operations['searchSeasonExpectedGoals'];
  };
  '/seasonandtournamentsimulations/{outletAuthKey}': {
    /**
     * Season and Tournament Simulations
     * @description Get Season and Tournament Simulations
     */
    get: operations['getSeasonAndTournamentPredictions'];
  };
  '/remoteshape/{outletAuthKey}': {
    /**
     * Shape Remote
     * @description Get Shape Remote list
     */
    get: operations['getMatchBroadcastShape'];
  };
  '/remoteshape/{outletAuthKey}/{matchUuid}': {
    /**
     * Shape Remote
     * @description Get Shape Remote list
     */
    get: operations['getMatchBroadcastShapeById'];
  };
  '/remotepressuretimeline/{outletAuthKey}': {
    /**
     * Remote Pressure Timeline
     * @description Get remote pressure timeline
     */
    get: operations['getRemotePressureTimeline'];
  };
  '/remotepressuretimeline/{outletAuthKey}/{matchUuid}': {
    /**
     * Remote Pressure Timeline
     * @description Get remote pressure timeline
     */
    get: operations['getRemotePressureTimelineById'];
  };
  '/remotematchtrackingepts/{outletAuthKey}': {
    /**
     * Remote Match Tracking EPTS
     * @description Get remote match tracking epts data
     */
    get: operations['getRemoteMatchTrackingEpts'];
  };
  '/remotematchtrackingepts/{outletAuthKey}/{matchUuid}': {
    /**
     * Remote Match Tracking EPTS
     * @description Get remote match tracking epts data
     */
    get: operations['getRemoteMatchTrackingEptsById'];
  };
  '/remoteevents/{outletAuthKey}': {
    /**
     * Enriched Soccer Events Remote
     * @description Get Enriched Soccer Events (Remote) list
     */
    get: operations['getBroadcastEvents'];
  };
  '/remoteevents/{outletAuthKey}/{matchUuid}': {
    /**
     * Enriched Soccer Events Remote
     * @description Get Enriched Soccer Events (Remote) list
     */
    get: operations['getBroadcastEventsById'];
  };
  '/remoteaggregatedfitness/{outletAuthKey}': {
    /**
     * Remote Aggregated Fitness
     * @description Get remote aggregated fitness
     */
    get: operations['getRemoteAggregatedFitness'];
  };
  '/remoteaggregatedfitness/{outletAuthKey}/{matchUuid}': {
    /**
     * Remote Aggregated Fitness
     * @description Get remote aggregated fitness
     */
    get: operations['getRemoteAggregatedFitnessByID'];
  };
  '/remoteaggregatedevents/{outletAuthKey}': {
    /**
     * Remote Aggregated Events
     * @description Get remote aggregated events
     */
    get: operations['getRemoteAggregatedEvents'];
  };
  '/remoteaggregatedevents/{outletAuthKey}/{matchUuid}': {
    /**
     * Remote Aggregated Events
     * @description Get remote aggregated events
     */
    get: operations['getRemoteAggregatedEventsById'];
  };
  '/refereestats/{outletAuthKey}': {
    /**
     * Referee Stats
     * @description Get Referee Stats
     */
    get: operations['getRefereeStats'];
  };
  '/referees/{outletAuthKey}': {
    /**
     * Referees
     * @description Get information about referees
     */
    get: operations['getReferees'];
  };
  '/rankings/{outletAuthKey}': {
    /**
     * Rankings
     * @description Get rankings data
     */
    get: operations['getMatchPreview'];
  };
  '/rankings/{outletAuthKey}/{tournamentCalendarUuid}': {
    /**
     * Rankings
     * @description Get rankings data
     */
    get: operations['getMatchPreview_1'];
  };
  '/possessionevent/{outletAuthKey}': {
    /**
     * Possession events
     * @description Get possession events
     */
    get: operations['searchPossessionEvents'];
  };
  '/possessionevent/{outletAuthKey}/{matchUuid}': {
    /**
     * Possession events
     * @description Get possession events
     */
    get: operations['getPossessionEventsById'];
  };
  '/possession/{outletAuthKey}': {
    /**
     * Possession
     * @description Get possession
     */
    get: operations['searchPossession'];
  };
  '/possession/{outletAuthKey}/{matchUuid}': {
    /**
     * Possession
     * @description Get possession
     */
    get: operations['getPossessionById'];
  };
  '/playerpossessionvalues/{outletAuthKey}': {
    /**
     * Player Possession Value
     * @description Get Possession Values of a player
     */
    get: operations['getPossessionValues'];
  };
  '/playerpossessionvalues/{outletAuthKey}/{playerUuid}': {
    /**
     * Player Possession Value
     * @description Get Possession Values of a player
     */
    get: operations['getPossessionValues_1'];
  };
  '/playercontract/{outletAuthKey}': {
    /**
     * Player Contract
     * @description Get contract related information for a player
     */
    get: operations['getPlayerContracts'];
  };
  '/playercontract/{outletAuthKey}/{personUuid}': {
    /**
     * Player Contract
     * @description Get contract related information for a player
     */
    get: operations['getPlayerContract'];
  };
  '/playercareer/{outletAuthKey}': {
    /**
     * Player career
     * @description Get information about player career
     */
    get: operations['getPlayerCareers'];
  };
  '/playercareer/{outletAuthKey}/{personUuid}': {
    /**
     * Player career
     * @description Get information about player career
     */
    get: operations['getCareerForPerson'];
  };
  '/passmatrix/{outletAuthKey}': {
    /**
     * Pass Matrix
     * @description Get pass matrix
     */
    get: operations['searchPassMatrix'];
  };
  '/passmatrix/{outletAuthKey}/{matchUuid}': {
    /**
     * Pass Matrix
     * @description Get pass matrix
     */
    get: operations['getPassMatrixById'];
  };
  '/nlgmatchpreview/{outletAuthKey}': {
    /**
     * NLG match preview
     * @description Get a Natural Language Generation match preview
     */
    get: operations['getNlgMatchPreview'];
  };
  '/nlgmatchpreview/{outletAuthKey}/{matchUuid}': {
    /**
     * NLG match preview
     * @description Get a Natural Language Generation match preview
     */
    get: operations['getNlgMatchPreview_1'];
  };
  '/nlgdynamicplayerbio/{outletAuthKey}': {
    /**
     * NLG Dynamic Player Bios
     * @description Get a summary of top-level player information
     */
    get: operations['getPlayerBios'];
  };
  '/nlgdynamicplayerbio/{outletAuthKey}/{personUuid}': {
    /**
     * NLG Dynamic Player Bios
     * @description Get a summary of top-level player information
     */
    get: operations['getBioForPerson'];
  };
  '/nlg_match_recap/{outletAuthKey}': {
    /**
     * NLG Match Recap
     * @description GET Match Recap NLG data
     */
    get: operations['getNlgMatchPreview_2'];
  };
  '/nlg_match_recap/{outletAuthKey}/{matchUuid}': {
    /**
     * NLG Match Recap
     * @description GET Match Recap NLG data
     */
    get: operations['getNlgMatchRecap'];
  };
  '/matchtvlisting/{outletAuthKey}': {
    /**
     * TV Listings
     * @description Get matches broadcasting information
     */
    get: operations['getMatchesTvListing'];
  };
  '/matchtvlisting/{outletAuthKey}/{matchUuid}': {
    /**
     * TV Listing
     * @description Get match broadcasting information
     */
    get: operations['getMatchTvListing'];
  };
  '/matchtracking/{outletAuthKey}': {
    /**
     * Match Tracking
     * @description Get match tracking data
     */
    get: operations['getMatchTracking'];
  };
  '/matchtracking/{outletAuthKey}/{matchUuid}': {
    /**
     * Match Tracking
     * @description Get match tracking data
     */
    get: operations['getMatchTrackingById'];
  };
  '/matchstats/{outletAuthKey}': {
    /**
     * Match Stats
     * @description Get match stats
     */
    get: operations['getMatchesStats'];
  };
  '/matchstats/{outletAuthKey}/{matchUuid}': {
    /**
     * Match Stats
     * @description Get match stats
     */
    get: operations['getMatchStats'];
  };
  '/matchreference/{outletAuthKey}': {
    /**
     * Match Reference
     * @description Get match reference
     */
    get: operations['getMatchReferences'];
  };
  '/matchprovisionallineups/{outletAuthKey}': {
    /**
     * Match Provisional LineUps
     * @description Get matches lineups
     */
    get: operations['searchMatchProvisionalLineUps'];
  };
  '/matchprovisionallineups/{outletAuthKey}/{matchUuid}': {
    /**
     * Match Provisional LineUps
     * @description Get match lineups
     */
    get: operations['getMatchProvisionalLineUpsById'];
  };
  '/matchpreview/{outletAuthKey}': {
    /**
     * Match Preview
     * @description Get match preview
     */
    get: operations['getMatchPreview_2'];
  };
  '/matchpreview/{outletAuthKey}/{matchUuid}': {
    /**
     * Match Preview
     * @description Get match preview
     */
    get: operations['getMatchPreviewById'];
  };
  '/matchpossessionvalues/{outletAuthKey}': {
    /**
     * Match Possession Values
     * @description Get match possession values
     */
    get: operations['getPossessionValues_2'];
  };
  '/matchpossessionvalues/{outletAuthKey}/{matchUuid}': {
    /**
     * Match Possession Values
     * @description Get match possession values
     */
    get: operations['getPossessionValuesById'];
  };
  '/matchplaytime/{outletAuthKey}/{matchUuid}': {
    /**
     * Match Playtime
     * @description MA43
     */
    get: operations['getMatchPlayTimeById'];
  };
  '/matchplayerratings/{outletAuthKey}': {
    /**
     * Match player ratings
     * @description Get player ratings for a match
     */
    get: operations['getPlayerRatingsById'];
  };
  '/matchplayerratings/{outletAuthKey}/{matchUuid}': {
    /**
     * Match player ratings
     * @description Get player ratings for a match
     */
    get: operations['getPlayerRatingsByAssetUuid'];
  };
  '/matchpenaltiespreview/{outletAuthKey}': {
    /**
     * Match penalties preview
     * @description Get a preview of penalties data
     */
    get: operations['getPenaltiesByAssetUuid'];
  };
  '/matchpenaltiespreview/{outletAuthKey}/{matchUuid}': {
    /**
     * Match penalties preview
     * @description Get a preview of penalties data
     */
    get: operations['getPenaltiesById'];
  };
  '/matchlivewinprobability/{outletAuthKey}': {
    /**
     * Live win probability
     * @description Get match win probability data
     */
    get: operations['searchLiveWinProbability'];
  };
  '/matchlivewinprobability/{outletAuthKey}/{matchUuid}': {
    /**
     * Live win probability
     * @description Get match win probability data
     */
    get: operations['getLiveWinProbabilityById'];
  };
  '/matchinsights/{outletAuthKey}': {
    /**
     * Automated insights
     * @description Get real-time Insights and comments for a match
     */
    get: operations['getMatchInsights'];
  };
  '/matchinsights/{outletAuthKey}/{matchUuid}': {
    /**
     * Automated insights
     * @description Get real-time Insights and comments for a match
     */
    get: operations['getMatchInsightsById'];
  };
  '/matchfitness/{outletAuthKey}': {
    /**
     * Match Fitness
     * @description Get match fitness
     */
    get: operations['getMatchFitness'];
  };
  '/matchfitness/{outletAuthKey}/{matchUuid}': {
    /**
     * Match Fitness
     * @description Get match fitness
     */
    get: operations['getMatchFitnessById'];
  };
  '/matchfactsbetting/{outletAuthKey}': {
    /**
     * Match facts betting
     * @description Get automated betting match facts
     */
    get: operations['searchMatchFactsBetting'];
  };
  '/matchfactsbetting/{outletAuthKey}/{matchUuid}': {
    /**
     * Match facts betting
     * @description Get automated betting match facts
     */
    get: operations['getMatchFactsBettingById'];
  };
  '/matchfactsall/{outletAuthKey}': {
    /**
     * Match facts all
     * @description Get all match facts
     */
    get: operations['searchMatchFactsAll'];
  };
  '/matchfactsall/{outletAuthKey}/{matchUuid}': {
    /**
     * Match facts all
     * @description Get all match facts
     */
    get: operations['getMatchFactsAllById'];
  };
  '/matchfacts/{outletAuthKey}': {
    /**
     * Match facts
     * @description Get match facts
     */
    get: operations['searchMatchFacts'];
  };
  '/matchfacts/{outletAuthKey}/{matchUuid}': {
    /**
     * Match facts
     * @description Get match facts
     */
    get: operations['getMatchFactsById'];
  };
  '/matchexpectedgoals/{outletAuthKey}': {
    /**
     * Match expected goals
     * @description Get match expected goals
     */
    get: operations['getMatchExpectedGoals'];
  };
  '/matchexpectedgoals/{outletAuthKey}/{matchUuid}': {
    /**
     * Match expected goals
     * @description Get match expected goals
     */
    get: operations['getMatchExpectedGoalsById'];
  };
  '/matcheventspossessionvalues/{outletAuthKey}': {
    /**
     * Match Events Possession Value
     * @description Get Possession Values mapped to Events happening in a particular match that's queried for.
     */
    get: operations['getPossessionValues_3'];
  };
  '/matcheventspossessionvalues/{outletAuthKey}/{matchUuid}': {
    /**
     * Match Events Possession Value
     * @description Get Possession Values mapped to Events happening in a particular match that's queried for.
     */
    get: operations['getPossessionValuesById_1'];
  };
  '/matchevent/{outletAuthKey}': {
    /**
     * Match Events
     * @description Get match events
     */
    get: operations['searchMatchEvents'];
  };
  '/matchevent/{outletAuthKey}/{matchUuid}': {
    /**
     * Match Events
     * @description Get match events
     */
    get: operations['getMatchEventsById'];
  };
  '/matchdetailed/{outletAuthKey}': {
    /**
     * Matches Details
     * @description Get matches details
     */
    get: operations['getMatches'];
  };
  '/matchdetailed/{outletAuthKey}/{matchUuid}': {
    /**
     * Match Details
     * @description Get match details
     */
    get: operations['getMatch'];
  };
  '/matchcornerspreview/{outletAuthKey}': {
    /**
     * Match Corners Preview
     * @description Get Match Corners Preview
     */
    get: operations['findMatchCornersPreview'];
  };
  '/matchcornerspreview/{outletAuthKey}/{matchId}': {
    /**
     * Match Corners Preview
     * @description Get Match Corners Preview
     */
    get: operations['findMatchCornersPreviewById'];
  };
  '/match/{outletAuthKey}': {
    /**
     * Matches
     * @description Get matches
     */
    get: operations['getMatches_1'];
  };
  '/match/{outletAuthKey}/{matchUuid}': {
    /**
     * Match
     * @description Get match
     */
    get: operations['getMatch_1'];
  };
  '/mappings/{outletAuthKey}': {
    /**
     * Mapping
     * @description Get mapping
     */
    get: operations['getMappingById'];
  };
  '/managerpreview/{outletAuthKey}': {
    /**
     * Manager Preview
     * @description Get manager preview
     */
    get: operations['getManagerPreview'];
  };
  '/managerpreview/{outletAuthKey}/{matchUuid}': {
    /**
     * Manager Preview
     * @description Get manager preview
     */
    get: operations['getManagerPreviewById'];
  };
  '/invenueshape/{outletAuthKey}': {
    /**
     * Shape in-Venue
     * @description Get list of all the shapes and formations with which a team has played in a match
     */
    get: operations['getMatchInVenueShape'];
  };
  '/invenueshape/{outletAuthKey}/{matchUuid}': {
    /**
     * Shape in-Venue
     * @description Get list of all the shapes and formations with which a team has played in a match
     */
    get: operations['getMatchInVenueShapeById'];
  };
  '/invenuepressuretimeline/{outletAuthKey}': {
    /**
     * In venue Pressure Timelines
     * @description Get timelines
     */
    get: operations['getInVenuePressureTimeline'];
  };
  '/invenuepressuretimeline/{outletAuthKey}/{matchUuid}': {
    /**
     * In venue Pressure Timelines
     * @description Get timelines
     */
    get: operations['getInVenuePressureTimelineById'];
  };
  '/invenuematchtrackingepts/{outletAuthKey}': {
    /**
     * InVenue Match Tracking EPTS
     * @description Get invenue match tracking epts data
     */
    get: operations['getInVenueMatchTrackingEpts'];
  };
  '/invenuematchtrackingepts/{outletAuthKey}/{matchUuid}': {
    /**
     * InVenue Match Tracking EPTS
     * @description Get invenue match tracking epts data
     */
    get: operations['getInVenueMatchTrackingEptsById'];
  };
  '/invenueevents/{outletAuthKey}': {
    /**
     * Enriched Soccer Event in-Venue
     * @description Get enriched soccer events (in venue) list
     */
    get: operations['getInVenueEvents'];
  };
  '/invenueevents/{outletAuthKey}/{matchUuid}': {
    /**
     * Enriched Soccer Event in-Venue
     * @description Get enriched soccer events (in venue) list
     */
    get: operations['getInVenueEventsById'];
  };
  '/invenueaggregatedfitness/{outletAuthKey}': {
    /**
     * In Venue Aggregated Fitness
     * @description Get in venue aggregated fitness
     */
    get: operations['getInVenueAggregatedFitness'];
  };
  '/invenueaggregatedfitness/{outletAuthKey}/{matchUuid}': {
    /**
     * In Venue Aggregated Fitness
     * @description Get in venue aggregated fitness
     */
    get: operations['getInVenueAggregatedFitnessById'];
  };
  '/invenueaggregatedevents/{outletAuthKey}': {
    /**
     * In Venue Aggregated Events
     * @description Get in venue aggregated events
     */
    get: operations['getInVenueAggregatedEvents'];
  };
  '/invenueaggregatedevents/{outletAuthKey}/{matchUuid}': {
    /**
     * In Venue Aggregated Events
     * @description Get in venue aggregated events
     */
    get: operations['getInVenueAggregatedEventsById'];
  };
  '/injuries/{outletAuthKey}': {
    /**
     * Injuries
     * @description Get a list of injured players
     */
    get: operations['getInjuries'];
  };
  '/deletions/{outletAuthKey}': {
    /**
     * Deletions
     * @description GET a list of either deleted matches, teams, or players according to the specified query parameter criteria
     */
    get: operations['getDeletions'];
  };
  '/decode/{outletAuthKey}': {
    /**
     * Decode
     * @description Get UUID mappings for all entities in a sport
     */
    get: operations['getDecode'];
  };
  '/contestantparticipation/{outletAuthKey}': {
    /**
     * Contestant Participation
     * @description Get Contestant Participation
     */
    get: operations['getContestantParticipation'];
  };
  '/contestantparticipation/{outletAuthKey}/{contestantUuid}': {
    /**
     * Contestant Participation
     * @description Get Contestant Participation
     */
    get: operations['getContestantParticipation_1'];
  };
  '/commentary/{outletAuthKey}': {
    /**
     * Commentary
     * @description Get commentary
     */
    get: operations['searchCommentary'];
  };
  '/commentary/{outletAuthKey}/{matchUuid}': {
    /**
     * Commentary
     * @description Get commentary
     */
    get: operations['getCommentaryById'];
  };
  '/areas/{outletAuthKey}': {
    /**
     * Areas
     * @description GET area(s) information
     */
    get: operations['getAreas'];
  };
  '/areas/{outletAuthKey}/{id}': {
    /**
     * Area
     * @description GET area information
     */
    get: operations['getAreas_1'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ContestantDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      statsId?: string;
      name?: string;
      shortName?: string;
      officialName?: string;
      code?: string;
      phrase?: string;
      probableTeams?: string;
      position?: string;
      country?: components['schemas']['CountryDto'];
      empty?: boolean;
    };
    VenueDto: {
      id?: string;
      neutral?: string;
      longName?: string;
      shortName?: string;
      name?: string;
      empty?: boolean;
    };
    VenuesDto: {
      /** Format: int64 */
      totalSize?: number;
      /** Format: date-time */
      lastUpdated?: string;
      venues?: components['schemas']['VenueDto'][];
    };
    CompetitionDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      statsId?: string;
      name?: string;
      knownName?: string;
      sponsorName?: string;
      competitionCode?: string;
      competitionFormat?: string;
      country?: components['schemas']['CountryDto'];
      empty?: boolean;
    };
    PersonDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      firstName?: string;
      lastName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      knownName?: string;
      birthName?: string;
      matchName?: string;
      type?: string;
      position?: string;
      metaDataHolder?: components['schemas']['PersonMetaDataHolder'];
      injuries?: components['schemas']['InjuryDto'][];
    };
    TrophiesDto: {
      /** Format: date-time */
      lastUpdated?: string;
      contestant?: components['schemas']['ContestantDto'];
      person?: components['schemas']['PersonDto'];
      competitions?: components['schemas']['CompetitionDto'][];
    };
    MembershipDto: {
      stat?: components['schemas']['StatDto'][];
      contestantId?: string;
      opContestantId?: string;
      ocContestantId?: string;
      contestantType?: string;
      contestantName?: string;
      active?: string;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      role?: string;
      type?: string;
      transferType?: string;
    };
    TransfersDto: {
      /** Format: date-time */
      userModTime?: string;
      persons?: components['schemas']['PersonDto'][];
    };
    MatchDateDto: {
      date?: string;
      numberOfGames?: string;
      match?: components['schemas']['MatchDto'][];
    };
    MatchDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      statsId?: string;
      /** Format: date */
      date?: string;
      competitionId?: string;
      competitionOcId?: string;
      competitionOpId?: string;
      competitionStatsId?: string;
      competitionName?: string;
      tournamentCalendarId?: string;
      tournamentCalendarOcId?: string;
      tournamentCalendarName?: string;
      competitionCode?: string;
      country?: string;
      countryId?: string;
      contestants?: components['schemas']['ContestantsDto'];
    };
    TournamentCalendarDto: {
      id?: string;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      name?: string;
      ocId?: string;
      empty?: boolean;
    };
    TournamentScheduleDto: {
      competition?: components['schemas']['CompetitionDto'];
      tournamentCalendar?: components['schemas']['TournamentCalendarDto'];
      matchDate?: components['schemas']['MatchDateDto'][];
    };
    SeriesDto: {
      id?: string;
      formatId?: string;
      ocId?: string;
      name?: string;
      empty?: boolean;
    };
    StageDto: {
      id?: string;
      formatId?: string;
      ocId?: string;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      name?: string;
      empty?: boolean;
    };
    TournamentCalendarsDto: {
      /** Format: int64 */
      totalSize?: number;
      competition: components['schemas']['CompetitionDto'][];
      /** Format: date-time */
      lastUpdated?: string;
    };
    PlayerDto: {
      playerId?: string;
      ocPlayerId?: string;
      opPlayerId?: string;
      firstName?: string;
      lastName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      knownName?: string;
      birthName?: string;
      matchName?: string;
      /** Format: int32 */
      shirtNumber?: number;
      position?: string;
      positionSide?: string;
      subPosition?: string;
      formationPlace?: string;
      captain?: string;
      lineBreakingPassAggregates?: components['schemas']['LineBreakingPassAggregatesDto'];
      pressureAggregates?: components['schemas']['PressureAggregatesDto'];
    };
    PlayerRankingDto: {
      name?: string;
      players?: components['schemas']['PlayerDto'][];
    };
    PlayerTopPerformersDto: {
      playerRankings?: components['schemas']['PlayerRankingDto'][];
    };
    TeamDto: {
      id?: string;
      /** Format: int32 */
      ocId?: number;
      /** Format: int32 */
      opId?: number;
      name?: string;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      value?: number;
    };
    TeamRankingDto: {
      name?: string;
      teams?: components['schemas']['TeamDto'][];
    };
    TeamTopPerformersDto: {
      teamRankings?: components['schemas']['TeamRankingDto'][];
    };
    TopPerformersDto: {
      /** Format: date-time */
      lastUpdated?: string;
      competition?: components['schemas']['CompetitionDto'];
      tournamentCalendar?: components['schemas']['TournamentCalendarDto'];
      playerTopPerformers?: components['schemas']['PlayerTopPerformersDto'];
      teamTopPerformers?: components['schemas']['TeamTopPerformersDto'];
    };
    CardDto: {
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      /** Format: int32 */
      periodId?: number;
      /** Format: int32 */
      timeMin?: number;
      timeMinSec?: string;
      /** Format: date-time */
      lastUpdated?: string;
      /** Format: date-time */
      timestamp?: string;
      type?: string;
      playerId?: string;
      ocPlayerId?: string;
      opPlayerId?: string;
      playerName?: string;
      teamOfficialId?: string;
      officialName?: string;
      optaEventId?: string;
      cardReason?: string;
      empty?: boolean;
    };
    CountryDto: {
      id?: string;
      name?: string;
      empty?: boolean;
    };
    GoalDto: {
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      /** Format: int32 */
      periodId?: number;
      /** Format: int32 */
      timeMin?: number;
      timeMinSec?: string;
      /** Format: date-time */
      lastUpdated?: string;
      /** Format: date-time */
      timestamp?: string;
      type?: string;
      scorerId?: string;
      ocScorerId?: string;
      opScorerId?: string;
      scorerName?: string;
      assistPlayerId?: string;
      ocAssistPlayerId?: string;
      opAssistPlayerId?: string;
      assistPlayerName?: string;
      secondAssistPlayerId?: string;
      ocSecondAssistPlayerId?: string;
      opSecondAssistPlayerId?: string;
      secondAssistPlayerName?: string;
      optaEventId?: string;
      /** Format: int32 */
      homeScore?: number;
      /** Format: int32 */
      awayScore?: number;
      unconfirmed?: string;
      varReviewed?: string;
      originalDecision?: string;
      empty?: boolean;
    };
    LineUpOutputDto: {
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      formationUsed?: string;
      teamOfficial?: components['schemas']['TeamOfficialDto'];
      preMatchPredictions?: components['schemas']['PreMatchPrediction'];
      livePredictions?: components['schemas']['LivePredictions'];
    };
    LivePrediction: {
      /** Format: int32 */
      timeMin?: number;
      /** Format: int32 */
      timeSec?: number;
      /** Format: int32 */
      periodId?: number;
      player?: components['schemas']['PlayerDto'][];
      team?: components['schemas']['TeamInputDto'];
    };
    LivePredictions: {
      livePredictions?: components['schemas']['LivePrediction'][];
    };
    MatchDetailsDto: {
      /** Format: int32 */
      matchTime?: number;
      /** Format: int32 */
      matchTimeMinute?: number;
      /** Format: int32 */
      matchTimeSecond?: number;
      /** Format: int32 */
      periodId?: number;
      matchStatus?: string;
      winner?: string;
      /** Format: int32 */
      leg?: number;
      relatedMatchId?: string;
      relatedMatchOcId?: string;
      relatedMatchOpId?: string;
      aggregateWinnerId?: string;
      /** Format: int32 */
      matchLengthMin?: number;
      /** Format: int32 */
      matchLengthSec?: number;
      delay?: string;
      varReason?: string;
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      contestantOfTheMatchId?: string;
      ocContestantOfTheMatchId?: string;
      opContestantOfTheMatchId?: string;
      playerId?: string;
      ocPlayerId?: string;
      opPlayerId?: string;
      playerOfTheMatch?: string;
      playerOfTheMatchId?: string;
      ocPlayerOfTheMatchId?: string;
      opPlayerOfTheMatchId?: string;
      goalkeeperOfTheMatch?: string;
      goalkeeperOfTheMatchId?: string;
      ocGoalkeeperOfTheMatchId?: string;
      opGoalkeeperOfTheMatchId?: string;
      periods?: components['schemas']['PeriodDto'][];
      scores?: components['schemas']['ScoresDto'];
      empty?: boolean;
    };
    MatchDetailsExtraDto: {
      attendance?: string;
      awayAttendance?: string;
      weather?: string;
      matchOfficials?: components['schemas']['MatchOfficialDto'][];
    };
    MatchInfoDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      statsId?: string;
      coverageLevel?: string;
      optaBetting?: string;
      /** Format: date */
      date?: string;
      time?: string;
      /** Format: date */
      localDate?: string;
      localTime?: string;
      week?: string;
      postMatch?: string;
      attendanceInfoId?: string;
      attendanceInfo?: string;
      /** Format: int32 */
      numberOfPeriods?: number;
      /** Format: int32 */
      periodLength?: number;
      /** Format: int32 */
      overtimeLength?: number;
      /** Format: date-time */
      lastUpdated?: string;
      nextMatchWinnerId?: string;
      nextMatchLoserId?: string;
      description?: string;
      sport?: components['schemas']['SportDto'];
      ruleset?: components['schemas']['RulesetDto'];
      competition?: components['schemas']['CompetitionDto'];
      tournamentCalendar?: components['schemas']['TournamentCalendarDto'];
      stage?: components['schemas']['StageDto'];
      series?: components['schemas']['SeriesDto'];
      contestants?: components['schemas']['ContestantDto'][];
      venue?: components['schemas']['VenueDto'];
    };
    MatchOfficialDto: {
      id?: string;
      opId?: string;
      ocId?: string;
      type?: string;
      firstName?: string;
      lastName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      knownName?: string;
      empty?: boolean;
    };
    MissedPenaltyDto: {
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      /** Format: int32 */
      periodId?: number;
      /** Format: int32 */
      timeMin?: number;
      timeMinSec?: string;
      /** Format: date-time */
      lastUpdated?: string;
      /** Format: date-time */
      timestamp?: string;
      type?: string;
      playerId?: string;
      ocPlayerId?: string;
      opPlayerId?: string;
      playerName?: string;
      optaEventId?: string;
      empty?: boolean;
    };
    PenaltyShotDto: {
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      /** Format: int32 */
      periodId?: number;
      /** Format: int32 */
      timeMin?: number;
      timeMinSec?: string;
      /** Format: date-time */
      lastUpdated?: string;
      /** Format: date-time */
      timestamp?: string;
      outcome?: string;
      playerId?: string;
      ocPlayerId?: string;
      opPlayerId?: string;
      scorerName?: string;
      /** Format: int32 */
      teamPenaltyNumber?: number;
      optaEventId?: string;
      empty?: boolean;
    };
    PeriodDto: {
      /** Format: int32 */
      id?: number;
      suspensions?: components['schemas']['Suspension'][];
      /** Format: date-time */
      start?: string;
      /** Format: date-time */
      end?: string;
      /** Format: int32 */
      lengthMin?: number;
      /** Format: int32 */
      lengthSec?: number;
      /** Format: int32 */
      announcedInjuryTime?: number;
    };
    PreMatchPrediction: {
      /** Format: int32 */
      timeMin?: number;
      /** Format: int32 */
      timeSec?: number;
      /** Format: int32 */
      periodId?: number;
      player?: components['schemas']['PlayerDto'][];
      team?: components['schemas']['TeamInputDto'];
    };
    RulesetDto: {
      id?: string;
      name?: string;
    };
    ScoreDto: {
      /** Format: int32 */
      home?: number;
      /** Format: int32 */
      away?: number;
    };
    ScoresDto: {
      ht?: components['schemas']['ScoreDto'];
      ft?: components['schemas']['ScoreDto'];
      et?: components['schemas']['ScoreDto'];
      pen?: components['schemas']['ScoreDto'];
      total?: components['schemas']['ScoreDto'];
      aggregate?: components['schemas']['ScoreDto'];
      totalUnconfirmed?: components['schemas']['ScoreDto'];
    };
    SportDto: {
      name?: string;
      id?: string;
    };
    SubstituteDto: {
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      /** Format: int32 */
      periodId?: number;
      /** Format: int32 */
      timeMin?: number;
      timeMinSec?: string;
      /** Format: date-time */
      lastUpdated?: string;
      /** Format: date-time */
      timestamp?: string;
      playerOnId?: string;
      ocPlayerOnId?: string;
      opPlayerOnId?: string;
      playerOnName?: string;
      playerOffId?: string;
      ocPlayerOffId?: string;
      opPlayerOffId?: string;
      playerOffName?: string;
      subReason?: string;
      empty?: boolean;
    };
    Suspension: {
      /** Format: date-time */
      start?: string;
      /** Format: date-time */
      end?: string;
      reason?: string;
    };
    TeamInputDto: {
      teamStats?: components['schemas']['TeamStatDto'][];
    };
    TeamOfficialDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      firstName?: string;
      lastName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      knownName?: string;
      type?: string;
      empty?: boolean;
    };
    TeamPlayerPredictionsLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      goals?: components['schemas']['GoalDto'][];
      missedPenalties?: components['schemas']['MissedPenaltyDto'][];
      cards?: components['schemas']['CardDto'][];
      substitutes?: components['schemas']['SubstituteDto'][];
      vars?: components['schemas']['VarDto'][];
      penaltyShots?: components['schemas']['PenaltyShotDto'][];
      lineUps?: components['schemas']['LineUpOutputDto'][];
      matchDetailsExtra?: components['schemas']['MatchDetailsExtraDto'];
      empty?: boolean;
    };
    TeamPlayerPredictionsOutputDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['TeamPlayerPredictionsLiveDataDto'];
    };
    TeamStatDto: {
      fh?: string;
      sh?: string;
      efh?: string;
      esh?: string;
      type?: string;
      value?: string;
    };
    VarDto: {
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      /** Format: int32 */
      periodId?: number;
      /** Format: int32 */
      timeMin?: number;
      timeMinSec?: string;
      /** Format: date-time */
      lastUpdated?: string;
      /** Format: date-time */
      timestamp?: string;
      type?: string;
      decision?: string;
      outcome?: string;
      playerId?: string;
      ocPlayerId?: string;
      opPlayerId?: string;
      playerName?: string;
      optaEventId?: string;
      optaEventUnderReviewId?: string;
      ownGoal?: string;
    };
    GenericMetaData: {
      ids?: string[];
      ocIds?: string[];
    };
    TeamsDto: {
      teams?: components['schemas']['ContestantDto'][];
      /** Format: date-time */
      lastUpdated?: string;
    };
    SuspensionsDto: {
      competition?: components['schemas']['CompetitionDto'];
      tournamentCalendar?: components['schemas']['TournamentCalendarDto'];
      persons?: components['schemas']['PersonDto'][];
      /** Format: date-time */
      lastUpdated?: string;
    };
    CorrectionDto: {
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      reason?: string;
      /** Format: int32 */
      points?: number;
      /** Format: int32 */
      goalsFor?: number;
      /** Format: int32 */
      goalsAgainst?: number;
    };
    RelegationDto: {
      rankStatus?: string;
      /** Format: int32 */
      matchesPlayedTotal?: number;
      /** Format: int32 */
      pointsTotal?: number;
      /** Format: float */
      relegationAverage?: number;
      seasons?: components['schemas']['SeasonDto'][];
    };
    SeasonDto: {
      id?: string;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      name?: string;
      /** Format: int32 */
      matchesPlayed?: number;
      /** Format: int32 */
      matchesWon?: number;
      /** Format: int32 */
      matchesLost?: number;
      /** Format: int32 */
      matchesDraw?: number;
      /** Format: int32 */
      goalsPro?: number;
      /** Format: int32 */
      goalsAgainst?: number;
      /** Format: int32 */
      points?: number;
    };
    StandingsCompetitionDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      name?: string;
      knownName?: string;
      sponsorName?: string;
    };
    StandingsDivisionDto: {
      type?: string;
      groupId?: string;
      groupName?: string;
      name?: string;
      /** Format: int32 */
      horizontal?: number;
      rankings?: components['schemas']['StandingsRankingDto'][];
    };
    StandingsRankingDto: {
      /** Format: int32 */
      rank?: number;
      rankStatus?: string;
      rankId?: string;
      /** Format: int32 */
      achievementStatus?: number;
      /** Format: int32 */
      achievementType?: number;
      /** Format: int32 */
      achievementStatus1?: number;
      /** Format: int32 */
      achievementType1?: number;
      /** Format: int32 */
      achievementStatus2?: number;
      /** Format: int32 */
      achievementType2?: number;
      /** Format: int32 */
      achievementStatus3?: number;
      /** Format: int32 */
      achievementType3?: number;
      /** Format: int32 */
      achievementStatus4?: number;
      /** Format: int32 */
      achievementType4?: number;
      /** Format: int32 */
      achievementStatus5?: number;
      /** Format: int32 */
      achievementType5?: number;
      /** Format: int32 */
      achievementStatus6?: number;
      /** Format: int32 */
      achievementType6?: number;
      /** Format: int32 */
      achievementStatus7?: number;
      /** Format: int32 */
      achievementType7?: number;
      /** Format: int32 */
      achievementStatus8?: number;
      /** Format: int32 */
      achievementType8?: number;
      /** Format: int32 */
      achievementStatus9?: number;
      /** Format: int32 */
      achievementType9?: number;
      /** Format: int32 */
      achievementStatus10?: number;
      /** Format: int32 */
      achievementType10?: number;
      /** Format: int32 */
      achievementStatus11?: number;
      /** Format: int32 */
      achievementType11?: number;
      /** Format: int32 */
      lastRank?: number;
      contestantId?: string;
      opContestantId?: string;
      contestantName?: string;
      contestantShortName?: string;
      contestantClubName?: string;
      contestantCode?: string;
      ocContestantId?: string;
      /** Format: int32 */
      points?: number;
      /** Format: int32 */
      matchesPlayed?: number;
      /** Format: double */
      relegationAverage?: number;
      /** Format: int32 */
      matchesWon?: number;
      /** Format: int32 */
      matchesLost?: number;
      /** Format: int32 */
      matchesDrawn?: number;
      /** Format: int32 */
      goalsFor?: number;
      /** Format: int32 */
      goalsAgainst?: number;
      goaldifference?: string;
      /** Format: int32 */
      awardedPoints?: number;
      /** Format: int32 */
      awardedGoalsFor?: number;
      /** Format: int32 */
      awardedGoalsAgainst?: number;
      /** Format: int32 */
      deductionPoints?: number;
      /** Format: int32 */
      deductionGoalsFor?: number;
      /** Format: int32 */
      deductionGoalsAgainst?: number;
      venueId?: string;
      venueName?: string;
      /** Format: int32 */
      minimumAttendance?: number;
      /** Format: int32 */
      maximumAttendance?: number;
      /** Format: int32 */
      averageAttendance?: number;
      /** Format: int32 */
      capacity?: number;
      percentSold?: string;
      /** Format: int32 */
      goals0?: number;
      /** Format: int32 */
      goals1?: number;
      /** Format: int32 */
      goals2?: number;
      /** Format: int32 */
      goals3?: number;
      /** Format: int32 */
      goals4?: number;
      /** Format: int32 */
      goals5?: number;
      /** Format: int32 */
      goals6?: number;
      /** Format: int32 */
      goals7?: number;
      /** Format: int32 */
      goalsMoreThan7?: number;
      goalsAverage?: string;
      lastSix?: string;
      relegationDto?: components['schemas']['RelegationDto'];
    };
    StandingsRulesetDto: {
      id?: string;
      name?: string;
    };
    StandingsSportDto: {
      id?: string;
      name?: string;
    };
    StandingsStageDto: {
      id?: string;
      formatId?: string;
      name?: string;
      ocId?: string;
      /** Format: int32 */
      vertical?: number;
      /** Format: int32 */
      horizontal?: number;
      /** Format: int32 */
      phase?: number;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      divisions?: components['schemas']['StandingsDivisionDto'][];
      corrections?: components['schemas']['CorrectionDto'][];
    };
    StandingsTournamentCalendarDto: {
      id?: string;
      ocId?: string;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      name?: string;
    };
    TeamStandingsDto: {
      sport?: components['schemas']['StandingsSportDto'];
      ruleset?: components['schemas']['StandingsRulesetDto'];
      competition?: components['schemas']['StandingsCompetitionDto'];
      tournamentCalendar?: components['schemas']['StandingsTournamentCalendarDto'];
      stages?: components['schemas']['StandingsStageDto'][];
      /** Format: date-time */
      userModTime?: string;
    };
    SquadDto: {
      id?: string;
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      contestantName?: string;
      contestantShortName?: string;
      contestantClubName?: string;
      contestantCode?: string;
      tournamentCalendarId?: string;
      ocTournamentCalendarId?: string;
      /** Format: date */
      tournamentCalendarStartDate?: string;
      /** Format: date */
      tournamentCalendarEndDate?: string;
      competitionName?: string;
      competitionId?: string;
      ocCompetitionId?: string;
      opCompetitionId?: string;
      type?: string;
      teamType?: string;
      venueName?: string;
      venueId?: string;
      people?: components['schemas']['SquadPersonDto'][];
    };
    SquadPersonDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      firstName?: string;
      middleName?: string;
      lastName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      knownName?: string;
      birthName?: string;
      matchName?: string;
      nationality?: string;
      nationalityId?: string;
      ocNationalityId?: string;
      opNationalityId?: string;
      secondNationality?: string;
      secondNationalityId?: string;
      ocSecondNationalityId?: string;
      opSecondNationalityId?: string;
      position?: string;
      type?: string;
      dateOfBirth?: string;
      dateOfDeath?: string;
      placeOfBirth?: string;
      countryOfBirth?: string;
      countryOfBirthId?: string;
      ocCountryOfBirthId?: string;
      opCountryOfBirthId?: string;
      /** Format: int32 */
      height?: number;
      /** Format: int32 */
      weight?: number;
      foot?: string;
      /** Format: int32 */
      shirtNumber?: number;
      status?: string;
      active?: string;
    };
    TeamSquadDto: {
      /** Format: int64 */
      totalSize?: number;
      squads?: components['schemas']['SquadDto'][];
      /** Format: date-time */
      lastUpdated?: string;
      /** @enum {string} */
      modificationStatus?: 'MODIFIED' | 'NOT_MODIFIED';
      modified?: boolean;
    };
    SeasonalStatDto: {
      name?: string;
      value?: string;
    };
    SeasonalStatsCompetitionDto: {
      id?: string;
      opId?: string;
      ocId?: string;
      name?: string;
      knownName?: string;
      sponsorName?: string;
    };
    SeasonalStatsContestantDto: {
      id?: string;
      opId?: string;
      ocId?: string;
      name?: string;
      stats?: components['schemas']['SeasonalStatDto'][];
    };
    SeasonalStatsCurrentTeamOnlyDto: {
      stats?: components['schemas']['SeasonalStatDto'][];
    };
    SeasonalStatsDto: {
      competition?: components['schemas']['SeasonalStatsCompetitionDto'];
      tournamentCalendar?: components['schemas']['SeasonalStatsTournamentCalendarDto'];
      contestant?: components['schemas']['SeasonalStatsContestantDto'];
      /** Format: date-time */
      userModTime?: string;
      /** Format: date-time */
      lastUpdated?: string;
      players?: components['schemas']['SeasonalStatsPlayerDto'][];
    };
    SeasonalStatsPlayerDto: {
      position?: string;
      id?: string;
      opId?: string;
      ocId?: string;
      shirtNumber?: string;
      firstName?: string;
      lastName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      knownName?: string;
      birthName?: string;
      matchName?: string;
      stats?: components['schemas']['SeasonalStatDto'][];
      currentTeamOnlyStats?: components['schemas']['SeasonalStatsCurrentTeamOnlyDto'];
    };
    SeasonalStatsTournamentCalendarDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      name?: string;
    };
    DivisionDto: {
      type?: string;
      rankings?: components['schemas']['RankingDto'][];
    };
    RankingDto: {
      rank?: string;
      contestantId?: string;
      contestantName?: string;
      contestantShortName?: string;
      contestantClubName?: string;
      contestantCode?: string;
      /** Format: double */
      highestSeasonRating?: number;
      /** Format: double */
      lowestSeasonRating?: number;
      /** Format: double */
      seasonAverageRating?: number;
      currentConfederationRank?: string;
      currentGlobalRank?: string;
      leagueUuid?: string;
      countryUuid?: string;
      leagueConfederationRank?: string;
      leagueGlobalRank?: string;
      confederationUuid?: string;
      calendarUuid?: string;
      /** Format: double */
      currentRating?: number;
      confederationCompRank?: string;
      globalCompRank?: string;
    };
    SeasonPowerRankingsDto: {
      /** Format: date-time */
      lastUpdated?: string;
      competition?: components['schemas']['CompetitionDto'];
      tournamentCalendar?: components['schemas']['TournamentCalendarDto'];
      divisions?: components['schemas']['DivisionDto'][];
    };
    OverallPlaytimeDto: {
      stats?: components['schemas']['SeasonPlayTimeStatDto'][];
    };
    SeasonPlayTimeCompetitionDto: {
      id?: string;
      opId?: string;
      ocId?: string;
      name?: string;
      knownName?: string;
    };
    SeasonPlayTimeContestantDto: {
      id?: string;
      opId?: string;
      ocId?: string;
      name?: string;
      stats?: components['schemas']['SeasonPlayTimeStatDto'][];
      playerStats?: components['schemas']['SeasonPlayTimePlayerStatsDto'];
    };
    SeasonPlayTimeDto: {
      /** Format: date-time */
      userModTime?: string;
      competition?: components['schemas']['SeasonPlayTimeCompetitionDto'];
      tournamentCalendar?: components['schemas']['SeasonPlayTimeTournamentCalendarDto'];
      overallPlaytime?: components['schemas']['OverallPlaytimeDto'];
      contestant?: components['schemas']['SeasonPlayTimeContestantDto'][];
    };
    SeasonPlayTimePlayerDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      firstName?: string;
      lastName?: string;
      matchName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      knownName?: string;
      stat?: components['schemas']['SeasonPlayTimeStatDto'][];
    };
    SeasonPlayTimePlayerStatsDto: {
      player?: components['schemas']['SeasonPlayTimePlayerDto'][];
    };
    SeasonPlayTimeStatDto: {
      type?: string;
      value?: string;
    };
    SeasonPlayTimeTournamentCalendarDto: {
      id?: string;
      ocId?: string;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      name?: string;
    };
    SeasonPlayerRatingsDto: {
      idTournamentAndContestant?: string;
      /** Format: date-time */
      lastUpdated?: string;
      competition?: components['schemas']['CompetitionDto'];
      tournamentCalendar?: components['schemas']['TournamentCalendarDto'];
      contestant?: components['schemas']['ContestantDto'];
    };
    EventDto: {
      /** Format: int64 */
      id?: number;
      fitnessEvent?: components['schemas']['FitnessEventDto'][];
    };
    SeasonExpectedGoalsDto: {
      /** Format: int64 */
      lastModified?: number;
      /** Format: date-time */
      lastUpdated?: string;
      competition?: components['schemas']['CompetitionDto'];
      tournamentCalendar?: components['schemas']['TournamentCalendarDto'];
      contestant?: components['schemas']['ContestantDto'];
      players?: components['schemas']['PlayerDto'][];
      matches?: components['schemas']['MatchDto'][];
    };
    DistributionDto: {
      value?: string;
      probability?: string;
    };
    PredictedDto: {
      typeId?: string;
      value?: string;
      distribution?: components['schemas']['DistributionDto'][];
    };
    PredictionTypeDto: {
      id?: string;
      name?: string;
    };
    PredictionTypesDto: {
      predictionType?: components['schemas']['PredictionTypeDto'][];
    };
    SeasonAndTournamentSimulationsDto: {
      sport?: components['schemas']['StandingsSportDto'];
      ruleset?: components['schemas']['StandingsRulesetDto'];
      competition?: components['schemas']['StandingsCompetitionDto'];
      tournamentCalendar?: components['schemas']['StandingsTournamentCalendarDto'];
      predictionTypes?: components['schemas']['PredictionTypesDto'];
      stages?: components['schemas']['StsStagesDto'];
      /** Format: date-time */
      lastUpdated?: string;
    };
    StsContestantDto: {
      id?: string;
      name?: string;
      groupId?: string;
      predictions?: components['schemas']['StsPredictionsDto'];
    };
    StsContestantsDto: {
      contestant?: components['schemas']['StsContestantDto'][];
    };
    StsDivisionDto: {
      type?: string;
      groupId?: string;
      groupName?: string;
      name?: string;
      /** Format: int32 */
      horizontal?: number;
      rankings?: components['schemas']['StsRankingDto'][];
    };
    StsPredictionsDto: {
      predicted?: components['schemas']['PredictedDto'][];
    };
    StsRankPredictionDto: {
      rankStatus?: string;
      rankId?: string;
      /** Format: double */
      probability?: number;
      value?: string;
    };
    StsRankingDto: {
      /** Format: int32 */
      rank?: number;
      rankStatus?: string;
      rankId?: string;
      /** Format: int32 */
      achievementStatus?: number;
      /** Format: int32 */
      achievementType?: number;
      /** Format: int32 */
      achievementStatus1?: number;
      /** Format: int32 */
      achievementType1?: number;
      /** Format: int32 */
      achievementStatus2?: number;
      /** Format: int32 */
      achievementType2?: number;
      /** Format: int32 */
      achievementStatus3?: number;
      /** Format: int32 */
      achievementType3?: number;
      /** Format: int32 */
      achievementStatus4?: number;
      /** Format: int32 */
      achievementType4?: number;
      /** Format: int32 */
      achievementStatus5?: number;
      /** Format: int32 */
      achievementType5?: number;
      /** Format: int32 */
      achievementStatus6?: number;
      /** Format: int32 */
      achievementType6?: number;
      /** Format: int32 */
      achievementStatus7?: number;
      /** Format: int32 */
      achievementType7?: number;
      /** Format: int32 */
      achievementStatus8?: number;
      /** Format: int32 */
      achievementType8?: number;
      /** Format: int32 */
      achievementStatus9?: number;
      /** Format: int32 */
      achievementType9?: number;
      /** Format: int32 */
      achievementStatus10?: number;
      /** Format: int32 */
      achievementType10?: number;
      /** Format: int32 */
      achievementStatus11?: number;
      /** Format: int32 */
      achievementType11?: number;
      /** Format: int32 */
      lastRank?: number;
      contestantId?: string;
      opContestantId?: string;
      contestantName?: string;
      contestantShortName?: string;
      contestantClubName?: string;
      contestantCode?: string;
      ocContestantId?: string;
      /** Format: int32 */
      points?: number;
      /** Format: int32 */
      matchesPlayed?: number;
      /** Format: double */
      relegationAverage?: number;
      /** Format: int32 */
      matchesWon?: number;
      /** Format: int32 */
      matchesLost?: number;
      /** Format: int32 */
      matchesDrawn?: number;
      /** Format: int32 */
      goalsFor?: number;
      /** Format: int32 */
      goalsAgainst?: number;
      goaldifference?: string;
      /** Format: int32 */
      awardedPoints?: number;
      /** Format: int32 */
      awardedGoalsFor?: number;
      /** Format: int32 */
      awardedGoalsAgainst?: number;
      /** Format: int32 */
      deductionPoints?: number;
      /** Format: int32 */
      deductionGoalsFor?: number;
      /** Format: int32 */
      deductionGoalsAgainst?: number;
      venueId?: string;
      venueName?: string;
      /** Format: int32 */
      minimumAttendance?: number;
      /** Format: int32 */
      maximumAttendance?: number;
      /** Format: int32 */
      averageAttendance?: number;
      /** Format: int32 */
      capacity?: number;
      percentSold?: string;
      /** Format: int32 */
      goals0?: number;
      /** Format: int32 */
      goals1?: number;
      /** Format: int32 */
      goals2?: number;
      /** Format: int32 */
      goals3?: number;
      /** Format: int32 */
      goals4?: number;
      /** Format: int32 */
      goals5?: number;
      /** Format: int32 */
      goals6?: number;
      /** Format: int32 */
      goals7?: number;
      /** Format: int32 */
      goalsMoreThan7?: number;
      goalsAverage?: string;
      lastSix?: string;
      predictions?: components['schemas']['StsPredictionsDto'];
      rankPrediction?: components['schemas']['StsRankPredictionDto'][];
    };
    StsStageDto: {
      id?: string;
      formatId?: string;
      name?: string;
      ocId?: string;
      /** Format: int32 */
      vertical?: number;
      /** Format: int32 */
      horizontal?: number;
      /** Format: int32 */
      phase?: number;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      contestants?: components['schemas']['StsContestantsDto'];
      divisions?: components['schemas']['StsDivisionDto'][];
    };
    StsStagesDto: {
      stage?: components['schemas']['StsStageDto'][];
    };
    MatchBroadcastLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      shapes?: components['schemas']['ShapesDto'][];
    };
    MatchBroadcastShapeDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['MatchBroadcastLiveDataDto'];
    };
    ShapesDto: {
      increment?: string;
      periodId?: string;
      contestant?: components['schemas']['ContestantDto'][];
    };
    PressureDto: {
      pressureReceived?: components['schemas']['PressureReceivedDto'];
      player?: components['schemas']['PressurePlayerDto'][];
    };
    PressureInfoDto: {
      /** Format: int32 */
      timeMin?: number;
      /** Format: int32 */
      timeMinSec?: number;
      /** Format: int32 */
      periodId?: number;
      pressure?: components['schemas']['PressureDto'][];
    };
    RemotePressureTimelineDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['RemotePressureTimelineLiveDataDto'];
    };
    RemotePressureTimelineLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      pressureInfo?: components['schemas']['PressureInfoDto'][];
      goals?: components['schemas']['GoalDto'][];
      missedPenalties?: components['schemas']['MissedPenaltyDto'][];
      cards?: components['schemas']['CardDto'][];
      substitutes?: components['schemas']['SubstituteDto'][];
      vars?: components['schemas']['VarDto'][];
      penaltyShots?: components['schemas']['PenaltyShotDto'][];
      matchDetailsExtra?: components['schemas']['MatchDetailsExtraDto'];
    };
    DataDto: {
      url?: string;
    };
    FpsDto: {
      metadata?: components['schemas']['DataDto'];
      trackingData?: components['schemas']['DataDto'];
    };
    RemoteMatchTrackingEptsDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      trackingFiles?: components['schemas']['TrackingFilesDto'];
    };
    TrackingFilesDto: {
      fps10?: components['schemas']['FpsDto'];
      fps25?: components['schemas']['FpsDto'];
    };
    BroadcastEventsDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['BroadcastEventsLiveDataDto'];
    };
    BroadcastEventsLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      events?: components['schemas']['EventDto'][];
    };
    ExpectedPassCompletionDto: {
      value?: string;
    };
    ExpectedPassReceiverDto: {
      value?: string;
    };
    ExpectedThreatDto: {
      value?: string;
    };
    MatchEventsQualifierDto: {
      /** Format: int64 */
      id?: number;
      /** Format: int32 */
      qualifierId?: number;
      value?: string;
      opValue?: string;
      ocValue?: string;
    };
    PassOptionQualityDto: {
      value?: string;
    };
    PredictionsDto: {
      expectedPassReceiver?: components['schemas']['ExpectedPassReceiverDto'];
      expectedPassCompletion?: components['schemas']['ExpectedPassCompletionDto'];
      expectedThreat?: components['schemas']['ExpectedThreatDto'];
      passOptionQuality?: components['schemas']['PassOptionQualityDto'];
    };
    PressurePlayerDto: {
      playerId?: string;
      /** Format: int32 */
      shirtNumber?: number;
      intensity?: string;
      positionX?: string;
      positionY?: string;
    };
    PressureReceivedDto: {
      value?: string;
    };
    EventsDto: {
      event?: components['schemas']['EventDto'][];
    };
    FitnessEventDto: {
      typeId?: string;
      playerId?: string;
      contestantId?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      /** Format: int32 */
      duration?: number;
    };
    FitnessStatsDto: {
      type?: string;
      statType?: components['schemas']['StatType'][];
    };
    LineUpDto: {
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      formationUsed?: string;
      players?: components['schemas']['PlayerDto'][];
      teamOfficial?: components['schemas']['TeamOfficialDto'];
      teamStat?: components['schemas']['TeamStatsDto'];
    };
    RemoteAggregatedFitnessDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['RemoteAggregatedFitnessLiveDataDto'];
    };
    RemoteAggregatedFitnessLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      goals?: components['schemas']['GoalDto'][];
      missedPenalties?: components['schemas']['MissedPenaltyDto'][];
      cards?: components['schemas']['CardDto'][];
      substitutes?: components['schemas']['SubstituteDto'][];
      vars?: components['schemas']['VarDto'][];
      penaltyShots?: components['schemas']['PenaltyShotDto'][];
      fitnessStats?: components['schemas']['FitnessStatsDto'];
      lineUps?: components['schemas']['LineUpDto'][];
      events?: components['schemas']['EventsDto'][];
      matchDetailsExtra?: components['schemas']['MatchDetailsExtraDto'];
    };
    StatDto: {
      fh?: string;
      sh?: string;
      efh?: string;
      esh?: string;
      type?: string;
      leagueAvg?: string;
      value?: string;
    };
    StatType: {
      id?: string;
      name?: string;
      unit?: string;
      lowerThreshold?: string;
      upperThreshold?: string;
      thresholdUnit?: string;
      timeThresholdMilliseconds?: string;
    };
    TeamStatsDto: {
      lineBreakingPassAggregates?: components['schemas']['LineBreakingPassAggregatesDto'];
      pressureAggregates?: components['schemas']['PressureAggregatesDto'];
    };
    LineBreakingPassAggregatesDto: {
      stat?: components['schemas']['StatDto'][];
    };
    PressureAggregatesDto: {
      stat?: components['schemas']['StatDto'][];
    };
    RemoteAggregatedEventsDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['RemoteAggregatedEventsLiveDataDto'];
    };
    RemoteAggregatedEventsLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      goals?: components['schemas']['GoalDto'][];
      missedPenalties?: components['schemas']['MissedPenaltyDto'][];
      cards?: components['schemas']['CardDto'][];
      substitutes?: components['schemas']['SubstituteDto'][];
      vars?: components['schemas']['VarDto'][];
      penaltyShots?: components['schemas']['PenaltyShotDto'][];
      lineUps?: components['schemas']['LineUpDto'][];
      matchDetailsExtra?: components['schemas']['MatchDetailsExtraDto'];
    };
    RSRefereeDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      firstName?: string;
      lastName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      knownName?: string;
      matchName?: string;
      stats?: components['schemas']['RSStatDto'][];
    };
    RSStatDto: {
      type?: string;
      value?: string;
    };
    RefereeStatsCompetitionDto: {
      id?: string;
      opId?: string;
      ocId?: string;
      name?: string;
      knownName?: string;
    };
    RefereeStatsDto: {
      competition?: components['schemas']['RefereeStatsCompetitionDto'];
      tournamentCalendar?: components['schemas']['RefereeStatsTournamentCalendarDto'];
      referee?: components['schemas']['RSRefereeDto'][];
      /** Format: date-time */
      userModTime?: string;
    };
    RefereeStatsTournamentCalendarDto: {
      id?: string;
      ocId?: string;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      name?: string;
    };
    RefereesDto: {
      /** Format: int64 */
      lastModified?: number;
      /** Format: int64 */
      totalSize?: number;
      competition?: components['schemas']['CompetitionDto'];
      tournamentCalendar?: components['schemas']['TournamentCalendarDto'];
      stages?: components['schemas']['StageDto'][];
      /** Format: date-time */
      userModTime?: string;
      dto?: components['schemas']['RefereesDto'];
    };
    RankingsCompetitionDto: {
      id?: string;
      opId?: string;
      ocId?: string;
      name?: string;
      knownName?: string;
    };
    RankingsDto: {
      /** Format: date-time */
      userModTime?: string;
      competition?: components['schemas']['RankingsCompetitionDto'];
      tournamentCalendar?: components['schemas']['RankingsTournamentCalendarDto'];
      matchDatas?: components['schemas']['RankingsMatchDataDto'][];
      teams?: components['schemas']['RankingsTeamDto'][];
    };
    RankingsMatchDataDto: {
      id?: string;
      opId?: string;
      ocId?: string;
      stats?: components['schemas']['RankingsStatDto'][];
      teamDatas?: components['schemas']['RankingsTeamDataDto'][];
    };
    RankingsStatDto: {
      type?: string;
      value?: string;
    };
    RankingsTeamDataDto: {
      side?: string;
      id?: string;
      opId?: string;
      ocId?: string;
    };
    RankingsTeamDto: {
      id?: string;
      opId?: string;
      ocId?: string;
      name?: string;
      players?: components['schemas']['RankingsTeamPlayerDto'][];
      stats?: components['schemas']['RankingsStatDto'][];
    };
    RankingsTeamPlayerDto: {
      id?: string;
      opId?: string;
      ocId?: string;
      name?: string;
      position?: string;
      stats?: components['schemas']['RankingsStatDto'][];
    };
    RankingsTournamentCalendarDto: {
      id?: string;
      ocId?: string;
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      name?: string;
    };
    PossessionEventsDto: {
      /** Format: int64 */
      lastModified?: number;
      matchUuid?: string;
      /** Format: date-time */
      userModTime?: string;
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['PossessionEventsLiveDataDto'];
    };
    PossessionEventsEventDto: {
      /** Format: int64 */
      id?: number;
      /** Format: int32 */
      eventId?: number;
      /** Format: int32 */
      typeId?: number;
      /** Format: int32 */
      periodId?: number;
      /** Format: int32 */
      timeMin?: number;
      /** Format: int32 */
      timeSec?: number;
      contestantId?: string;
      opContestantId?: string;
      ocContestantId?: string;
      opPlayerId?: string;
      ocPlayerId?: string;
      playerId?: string;
      playerName?: string;
      /** Format: int32 */
      outcome?: number;
      /** Format: int32 */
      assist?: number;
      /** Format: int32 */
      keyPass?: number;
      /** Format: float */
      getxCoord?: number;
      /** Format: float */
      getyCoord?: number;
      /** Format: int32 */
      sequenceId?: number;
      /** Format: int32 */
      possessionId?: number;
      /** Format: date-time */
      timestamp?: string;
      /** Format: date-time */
      lastModified?: string;
      qualifiers?: components['schemas']['PossessionEventsQualifierDto'][];
    };
    PossessionEventsLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      events?: components['schemas']['PossessionEventsEventDto'][];
    };
    PossessionEventsQualifierDto: {
      /** Format: int64 */
      id?: number;
      /** Format: int32 */
      qualifierId?: number;
      value?: string;
      opValue?: string;
      ocValue?: string;
    };
    PossessionDto: {
      waves?: components['schemas']['PossessionWaveDto'][];
    };
    PossessionIntervalDto: {
      type?: string;
      away?: string;
      home?: string;
      middle?: string;
    };
    PossessionIntervalLengthDto: {
      type?: string;
      intervals?: components['schemas']['PossessionIntervalDto'][];
    };
    PossessionLastDto: {
      type?: string;
      away?: string;
      home?: string;
    };
    PossessionLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      possession?: components['schemas']['PossessionDto'];
    };
    PossessionOverallDto: {
      away?: string;
      home?: string;
      middle?: string;
    };
    PossessionTerritoryDto: {
      /** Format: int64 */
      lastModified?: number;
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['PossessionLiveDataDto'];
    };
    PossessionWaveDto: {
      type?: string;
      intervalLengths?: components['schemas']['PossessionIntervalLengthDto'][];
      lasts?: components['schemas']['PossessionLastDto'][];
      overall?: components['schemas']['PossessionOverallDto'];
    };
    ContestantsDto: {
      contestant?: components['schemas']['ContestantDto'][];
    };
    MatchesDto: {
      /** Format: int64 */
      totalSize?: number;
      matches?: components['schemas']['MatchDto'][];
    };
    PlayerPossessionValuesDTO: {
      person?: components['schemas']['PersonDto'];
      tournamentCalendar?: components['schemas']['TournamentCalendarDto'];
      pvCategories?: components['schemas']['PvCategoriesDto'];
      membership?: components['schemas']['MembershipDto'][];
      /** Format: date-time */
      lastUpdated?: string;
    };
    PvCategoriesDto: {
      timeMin?: string;
      timeSec?: string;
      periodId?: string;
      totalPossessionValue?: components['schemas']['TotalPossessionValueDto'];
      totalPlusPV?: components['schemas']['TotalPlusPVDto'];
      totalMinusPV?: components['schemas']['TotalMinusPVDto'];
      totalPlusPass?: components['schemas']['TotalPlusPassDto'];
      totalMinusPass?: components['schemas']['TotalMinusPassDto'];
      totalPlusCross?: components['schemas']['TotalPlusCrossDto'];
      totalMinusCross?: components['schemas']['TotalMinusCrossDto'];
      totalPlusTakeOns?: components['schemas']['TotalPlusTakeOnsDto'];
      totalMinusTakeOn?: components['schemas']['TotalMinusTakeOnDto'];
      totalPlusSetPlaysTaken?: components['schemas']['TotalPlusSetPlaysTakenDto'];
      totalMinusSetPlayTaken?: components['schemas']['TotalMinusSetPlayTakenDto'];
      totalPlusSetPlaysDrawn?: components['schemas']['TotalPlusSetPlaysDrawnDto'];
      totalMinusSetPlayConceded?: components['schemas']['TotalMinusSetPlayConcededDto'];
      totalPlusRegains?: components['schemas']['TotalPlusRegainsDto'];
      totalMinusLosingPossession?: components['schemas']['TotalMinusLosingPossessionDto'];
      totalPlusSetPlayWonPenalty?: components['schemas']['TotalPlusSetPlayWonPenaltyDto'];
      totalPlusSetPlayWonFreekick?: components['schemas']['TotalPlusSetPlayWonFreekickDto'];
      totalPlusSetPlayWonOther?: components['schemas']['TotalPlusSetPlayWonOtherDto'];
      totalMinusSetPlayConcededPenalty?: components['schemas']['TotalMinusSetPlayConcededPenaltyDto'];
      totalMinusSetPlayConcededFreekick?: components['schemas']['TotalMinusSetPlayConcededFreekickDto'];
      totalMinusSetPlayConcededOther?: components['schemas']['TotalMinusSetPlayConcededOtherDto'];
    };
    TotalMinusCrossDto: {
      totalMinusCross?: string;
    };
    TotalMinusLosingPossessionDto: {
      totalMinusLosingPossession?: string;
    };
    TotalMinusPVDto: {
      totalMinusPV?: string;
    };
    TotalMinusPassDto: {
      totalMinusPass?: string;
    };
    TotalMinusSetPlayConcededDto: {
      totalMinusSetPlayConceded?: string;
    };
    TotalMinusSetPlayConcededFreekickDto: {
      totalMinusSetPlayConcededFreekick?: string;
    };
    TotalMinusSetPlayConcededOtherDto: {
      totalMinusSetPlayConcededOther?: string;
    };
    TotalMinusSetPlayConcededPenaltyDto: {
      totalMinusSetPlayConcededPenalty?: string;
    };
    TotalMinusSetPlayTakenDto: {
      totalMinusSetPlayTaken?: string;
    };
    TotalMinusTakeOnDto: {
      totalMinusTakeOn?: string;
    };
    TotalPlusCrossDto: {
      totalPlusCross?: string;
    };
    TotalPlusPVDto: {
      totalPlusPV?: string;
    };
    TotalPlusPassDto: {
      totalPlusPass?: string;
    };
    TotalPlusRegainsDto: {
      totalPlusRegains?: string;
    };
    TotalPlusSetPlayWonFreekickDto: {
      totalPlusSetPlayWonFreekick?: string;
    };
    TotalPlusSetPlayWonOtherDto: {
      totalPlusSetPlayWonOther?: string;
    };
    TotalPlusSetPlayWonPenaltyDto: {
      totalPlusSetPlayWonPenalty?: string;
    };
    TotalPlusSetPlaysDrawnDto: {
      totalPlusSetPlaysDrawn?: string;
    };
    TotalPlusSetPlaysTakenDto: {
      totalPlusSetPlaysTaken?: string;
    };
    TotalPlusTakeOnsDto: {
      totalPlusTakeOns?: string;
    };
    TotalPossessionValueDto: {
      totalPossessionValue?: string;
    };
    PlayerContractDto: {
      /** Format: date-time */
      userModTime?: string;
      person?: components['schemas']['PersonDto'][];
    };
    PlayerCareerDto: {
      person: components['schemas']['PersonDto'][];
      /** Format: date-time */
      lastUpdated?: string;
    };
    PassMatrixDto: {
      /** Format: int64 */
      lastModified?: number;
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['PassMatrixLiveDataDto'];
    };
    PassMatrixLineUpDto: {
      players?: components['schemas']['PassMatrixPlayerDto'][];
      matchLineUp?: components['schemas']['LineUpDto'];
      teamOfficial?: components['schemas']['TeamOfficialDto'];
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
    };
    PassMatrixLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      lineUp?: components['schemas']['PassMatrixLineUpDto'][];
    };
    PassMatrixPlayerDto: {
      /** Format: int32 */
      crossLost?: number;
      /** Format: int32 */
      crossSuccess?: number;
      /** Format: int32 */
      passLost?: number;
      /** Format: int32 */
      passSuccess?: number;
      /** Format: float */
      x?: number;
      /** Format: float */
      y?: number;
      playerPasses?: components['schemas']['PassMatrixPlayerPassDto'][];
      player?: components['schemas']['PlayerDto'];
      birthName?: string;
      position?: string;
      positionSide?: string;
      playerId?: string;
      ocPlayerId?: string;
      opPlayerId?: string;
      /** Format: int32 */
      shirtNumber?: number;
      lastName?: string;
      matchName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      firstName?: string;
      knownName?: string;
    };
    PassMatrixPlayerPassDto: {
      firstName?: string;
      lastName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      knownName?: string;
      birthName?: string;
      matchName?: string;
      opPlayerId?: string;
      ocPlayerId?: string;
      rbPlayerId?: string;
      playerName?: string;
      /** Format: int32 */
      cross?: number;
      /** Format: int32 */
      value?: number;
      playerUuid?: string;
    };
    HeadToHeadDto: {
      title?: string;
      possession?: components['schemas']['ContestantsStatsDto'];
      totalShots?: components['schemas']['ContestantsStatsDto'];
      shotsOnTarget?: components['schemas']['ContestantsStatsDto'];
      expectedGoals?: components['schemas']['ContestantsStatsDto'];
      corners?: components['schemas']['ContestantsStatsDto'];
      fouls?: components['schemas']['ContestantsStatsDto'];
      yellowCards?: components['schemas']['YellowCardsDto'];
      redCards?: components['schemas']['RedCardsDto'];
    };
    HighlightsDto: {
      inTheGoals?: components['schemas']['InTheGoalsDto'];
      whatItMeans?: components['schemas']['WhatItMeansDto'];
      injuryConcern?: components['schemas']['InjuryConcernDto'];
      varInAction?: components['schemas']['VarInActionDto'];
      headToHead?: components['schemas']['HeadToHeadDto'];
      upNext?: components['schemas']['UpNextDto'];
    };
    MessageDto: {
      /** Format: int32 */
      id?: number;
      fact?: string;
      contestantId?: string;
      playerId?: string;
      periodId?: string;
      /** Format: int32 */
      timeMin?: number;
    };
    MessagesDto: {
      language?: string;
      commentaryItems?: components['schemas']['CommentaryItemDto'][];
    };
    NlgMatchPreviewDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      messages?: components['schemas']['MessagesDto'];
      highlights?: components['schemas']['HighlightsDto'];
    };
    UpNextDto: {
      title?: string;
      home?: components['schemas']['ContestantsNextUp'];
      away?: components['schemas']['ContestantsNextUp'];
    };
    NlgPlayerBioDto: {
      person: components['schemas']['PersonDto'][];
      /** Format: date-time */
      lastUpdated?: string;
    };
    ContestantsCardsDto: {
      count?: string;
      players?: string;
    };
    ContestantsNextUp: {
      contestant?: string;
      competition?: string;
      date?: string;
    };
    ContestantsStatsDto: {
      homeContestant?: string;
      awayContestant?: string;
    };
    InTheGoalsDto: {
      title?: string;
      comment?: string;
    };
    InjuryConcernDto: {
      title?: string;
      comment?: string;
    };
    LedeDto: {
      comment?: string;
    };
    NlgMatchRecapDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      language?: string;
      messages?: components['schemas']['MessageDto'][];
      messageObject?: components['schemas']['MessagesDto'];
      highlights?: components['schemas']['HighlightsDto'];
      /** Format: date-time */
      lastUpdated?: string;
      game_id?: string;
      lede?: components['schemas']['LedeDto'];
    };
    RedCardsDto: {
      homeContestant?: components['schemas']['ContestantsCardsDto'];
      awayContestant?: components['schemas']['ContestantsCardsDto'];
    };
    VarInActionDto: {
      title?: string;
      comment?: string;
    };
    WhatItMeansDto: {
      title?: string;
      comment?: string;
    };
    YellowCardsDto: {
      homeContestant?: components['schemas']['ContestantsCardsDto'];
      awayContestant?: components['schemas']['ContestantsCardsDto'];
    };
    MatchTvListingDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      tvListing?: components['schemas']['CountryDto'][];
    };
    MatchesTvListingDto: {
      /** Format: int64 */
      totalSize?: number;
      matches?: components['schemas']['MatchTvListingDto'][];
    };
    MatchTrackingDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      trackingFiles?: components['schemas']['TrackingFilesDto'];
    };
    LiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      goals?: components['schemas']['GoalDto'][];
      missedPenalties?: components['schemas']['MissedPenaltyDto'][];
      cards?: components['schemas']['CardDto'][];
      substitutes?: components['schemas']['SubstituteDto'][];
      vars?: components['schemas']['VarDto'][];
      penaltyShots?: components['schemas']['PenaltyShotDto'][];
      lineUps?: components['schemas']['LineUpDto'][];
      matchDetailsExtra?: components['schemas']['MatchDetailsExtraDto'];
      empty?: boolean;
    };
    MatchStatsDto: {
      /** Format: int64 */
      lastModified?: number;
      matchDto?: components['schemas']['MatchDto'];
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['LiveDataDto'];
    };
    MatchesStatsDto: {
      /** Format: int64 */
      totalSize?: number;
      matchesStats?: components['schemas']['MatchStatsDto'][];
    };
    MatchReferenceDto: {
      /** Format: int64 */
      totalSize?: number;
      matchInfos?: components['schemas']['MatchReferenceMatchInfoDto'][];
      type?: string;
    };
    MatchReferenceMatchInfoDto: {
      id?: string;
      matchStatus?: string;
      /** Format: date-time */
      lastUpdated?: string;
      /** Format: date */
      date?: string;
    };
    MatchProvisionalLineUpsDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      provisionalLineUps?: components['schemas']['ProvisionalLineUpsDto'];
    };
    MatchesProvisionalLineUpsDto: {
      /** Format: int64 */
      totalSize?: number;
      matchProvisionalLineUps?: components['schemas']['MatchProvisionalLineUpsDto'][];
    };
    ProvisionalLineUpsDto: {
      lineUp?: components['schemas']['LineUpDto'][];
    };
    ModelAndView: {
      view?: components['schemas']['View'];
      model?: {
        [key: string]: Record<string, never>;
      };
      /** @enum {string} */
      status?:
        | '100 CONTINUE'
        | '101 SWITCHING_PROTOCOLS'
        | '102 PROCESSING'
        | '103 CHECKPOINT'
        | '200 OK'
        | '201 CREATED'
        | '202 ACCEPTED'
        | '203 NON_AUTHORITATIVE_INFORMATION'
        | '204 NO_CONTENT'
        | '205 RESET_CONTENT'
        | '206 PARTIAL_CONTENT'
        | '207 MULTI_STATUS'
        | '208 ALREADY_REPORTED'
        | '226 IM_USED'
        | '300 MULTIPLE_CHOICES'
        | '301 MOVED_PERMANENTLY'
        | '302 FOUND'
        | '302 MOVED_TEMPORARILY'
        | '303 SEE_OTHER'
        | '304 NOT_MODIFIED'
        | '305 USE_PROXY'
        | '307 TEMPORARY_REDIRECT'
        | '308 PERMANENT_REDIRECT'
        | '400 BAD_REQUEST'
        | '401 UNAUTHORIZED'
        | '402 PAYMENT_REQUIRED'
        | '403 FORBIDDEN'
        | '404 NOT_FOUND'
        | '405 METHOD_NOT_ALLOWED'
        | '406 NOT_ACCEPTABLE'
        | '407 PROXY_AUTHENTICATION_REQUIRED'
        | '408 REQUEST_TIMEOUT'
        | '409 CONFLICT'
        | '410 GONE'
        | '411 LENGTH_REQUIRED'
        | '412 PRECONDITION_FAILED'
        | '413 PAYLOAD_TOO_LARGE'
        | '413 REQUEST_ENTITY_TOO_LARGE'
        | '414 URI_TOO_LONG'
        | '414 REQUEST_URI_TOO_LONG'
        | '415 UNSUPPORTED_MEDIA_TYPE'
        | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
        | '417 EXPECTATION_FAILED'
        | '418 I_AM_A_TEAPOT'
        | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
        | '420 METHOD_FAILURE'
        | '421 DESTINATION_LOCKED'
        | '422 UNPROCESSABLE_ENTITY'
        | '423 LOCKED'
        | '424 FAILED_DEPENDENCY'
        | '425 TOO_EARLY'
        | '426 UPGRADE_REQUIRED'
        | '428 PRECONDITION_REQUIRED'
        | '429 TOO_MANY_REQUESTS'
        | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
        | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
        | '500 INTERNAL_SERVER_ERROR'
        | '501 NOT_IMPLEMENTED'
        | '502 BAD_GATEWAY'
        | '503 SERVICE_UNAVAILABLE'
        | '504 GATEWAY_TIMEOUT'
        | '505 HTTP_VERSION_NOT_SUPPORTED'
        | '506 VARIANT_ALSO_NEGOTIATES'
        | '507 INSUFFICIENT_STORAGE'
        | '508 LOOP_DETECTED'
        | '509 BANDWIDTH_LIMIT_EXCEEDED'
        | '510 NOT_EXTENDED'
        | '511 NETWORK_AUTHENTICATION_REQUIRED';
      empty?: boolean;
      viewName?: string;
      modelMap?: {
        // @ts-expect-error Swagger
        empty?: boolean;
        [key: string]: Record<string, never> | undefined;
      };
      reference?: boolean;
    };
    View: {
      contentType?: string;
    };
    CompetitionMatchDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      /** Format: date */
      date?: string;
      contestants?: components['schemas']['ContestantsDto'];
      goals?: components['schemas']['MatchPreviewGoalDto'][];
      competitionId?: string;
      competitionOcId?: string;
      competitionOpId?: string;
      competitionName?: string;
      tournamentCalendarId?: string;
      tournamentCalendarOcId?: string;
      tournamentCalendarName?: string;
      competitionCode?: string;
      competitionFormat?: string;
      country?: string;
      countryId?: string;
    };
    FormDto: {
      contestantId?: string;
      lastSix?: string;
      matches?: components['schemas']['CompetitionMatchDto'][];
    };
    MatchPreviewDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      previousMeetings?: components['schemas']['PreviousMeetingsDto'];
      previousMeetingsAnyComp?: components['schemas']['PreviousMeetingsDto'];
      forms?: components['schemas']['FormDto'][];
      formsAnyComp?: components['schemas']['FormDto'][];
    };
    MatchPreviewGoalDto: {
      type?: string;
      scorerId?: string;
      scorerOpId?: string;
      scorerOcId?: string;
      scorerName?: string;
      scorerFirstName?: string;
      scorerLastName?: string;
      scorerShortFirstName?: string;
      scorerShortLastName?: string;
      scorerKnownName?: string;
      assistPlayerId?: string;
      assistPlayerOcId?: string;
      assistPlayerOpId?: string;
      assistPlayerName?: string;
      assistPlayerFirstName?: string;
      assistPlayerLastName?: string;
      assistPlayerShortFirstName?: string;
      assistPlayerShortLastName?: string;
      assistPlayerKnownName?: string;
      contestantId?: string;
      /** Format: int32 */
      periodId?: number;
      /** Format: int32 */
      timeMin?: number;
    };
    PreviousMeetingsDto: {
      match?: components['schemas']['MatchDto'][];
    };
    MatchPossessionValuesDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      possessionValues?: components['schemas']['PossessionValueDto'][];
      possessionValue?: components['schemas']['PossessionValueDto'];
    };
    PossessionValueDto: {
      contestants?: components['schemas']['ContestantDto'][];
    };
    MatchPlayTimeDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['MatchPlayTimeLiveDataDto'];
    };
    MatchPlayTimeLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      playTime?: components['schemas']['PlayTimeDto'];
      matchDetailsExtra?: components['schemas']['MatchDetailsExtraDto'];
    };
    PlayTimeDetailsDto: {
      stats?: components['schemas']['StatDto'][];
      contestants?: components['schemas']['ContestantDto'][];
    };
    PlayTimeDto: {
      firstHalf?: components['schemas']['PlayTimeDetailsDto'];
      secondHalf?: components['schemas']['PlayTimeDetailsDto'];
      firstHalfExtra?: components['schemas']['PlayTimeDetailsDto'];
      secondHalfExtra?: components['schemas']['PlayTimeDetailsDto'];
      total?: components['schemas']['PlayTimeDetailsDto'];
    };
    LineUpPlayerDto: {
      playerId?: string;
      opPlayerId?: string;
      firstName?: string;
      lastName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      knownName?: string;
      birthName?: string;
      matchName?: string;
      /** Format: int32 */
      shirtNumber?: number;
      position?: string;
      positionSide?: string;
    };
    MatchPlayerRatingsDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      playerRatings?: components['schemas']['PlayerRatingsDto'];
      lineUps?: components['schemas']['PlayerRatingsLineUpDto'][];
    };
    PlayerRatingsDto: {
      matchId?: string;
      postMatch?: string;
      /** Format: date-time */
      lastUpdated?: string;
      contestants?: components['schemas']['ContestantDto'][];
    };
    PlayerRatingsLineUpDto: {
      contestantId?: string;
      opContestantId?: string;
      players?: components['schemas']['LineUpPlayerDto'][];
      teamOfficial?: components['schemas']['PlayerRatingsTeamOfficialDto'];
    };
    PlayerRatingsTeamOfficialDto: {
      id?: string;
      opId?: string;
      firstName?: string;
      lastName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      knownName?: string;
      type?: string;
    };
    MatchPenaltiesPreviewDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      penalties?: components['schemas']['PenaltiesDto'];
    };
    PenaltiesDto: {
      matchId?: string;
      /** Format: date-time */
      lastUpdated?: string;
      contestants?: components['schemas']['ContestantDto'][];
    };
    LiveWinProbabilityDto: {
      /** Format: int64 */
      lastModified?: number;
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['LiveWinProbabilityLiveDataDto'];
      matchUuid?: string;
      /** Format: date-time */
      userModTime?: string;
    };
    LiveWinProbabilityLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      preMatchPredictions?: components['schemas']['PredictionsDto'][];
      overallLivePredictions?: components['schemas']['PredictionsDto'][];
      livePredictions?: components['schemas']['PredictionsDto'][];
      events?: components['schemas']['EventDto'][];
    };
    InsightDto: {
      id?: string;
      createdDate?: string;
      lastModified?: string;
      text?: string;
      languageCode?: string;
      playerId?: string;
      opPlayerId?: string;
      contestantId?: string;
      opContestantId?: string;
      eventId?: string;
      /** Format: int32 */
      periodId?: number;
      templateId?: string;
      timeMin?: string;
      timeSec?: string;
      state?: string;
      rank?: string;
      tags?: string[];
      marketTypes?: components['schemas']['MarketTypeDto'][];
    };
    MarketTypeDto: {
      id?: string;
      type?: string;
    };
    MatchInsightsDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      insights?: components['schemas']['InsightDto'][];
    };
    MatchFitnessDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['MatchFitnessLiveDataDto'];
    };
    MatchFitnessLineupDto: {
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      formationUsed?: string;
      players?: components['schemas']['MatchFitnessPlayerDto'][];
      teamOfficial?: components['schemas']['TeamOfficialDto'];
      teams?: components['schemas']['MatchFitnessTeamDto'];
    };
    MatchFitnessLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      lineUps?: components['schemas']['MatchFitnessLineupDto'][];
    };
    MatchFitnessPlayerDto: {
      playerUuid?: string;
      ocPlayerId?: string;
      opPlayerId?: string;
      firstName?: string;
      lastName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      knownName?: string;
      birthName?: string;
      matchName?: string;
      shirtNumber?: string;
      position?: string;
      subPosition?: string;
      stat?: components['schemas']['MatchFitnessStatDto'][];
    };
    MatchFitnessStatDto: {
      type?: string;
      value?: string;
    };
    MatchFitnessTeamDto: {
      teamUuid?: string;
      teamOpId?: string;
      stat?: components['schemas']['MatchFitnessStatDto'][];
    };
    MatchFactsBettingDto: {
      /** Format: int64 */
      lastModified?: number;
      matchInfo?: components['schemas']['MatchInfoDto'];
      messages?: components['schemas']['MessageDto'][];
    };
    MatchFactsAllDto: {
      /** Format: int64 */
      lastModified?: number;
      matchInfo?: components['schemas']['MatchInfoDto'];
      messageWrappers?: components['schemas']['MessagesWrapperDto'][];
    };
    MessagesWrapperDto: {
      state?: string;
      messages?: components['schemas']['MessageDto'][];
    };
    MatchFactDto: {
      id?: string;
      fact?: string;
    };
    MatchFactsDto: {
      /** Format: int64 */
      lastModified?: number;
      matchInfo?: components['schemas']['MatchInfoDto'];
      matchFacts?: components['schemas']['MatchFactDto'][];
    };
    MatchExpectedGoalsDto: {
      /** Format: int64 */
      lastModified?: number;
      matchUuid?: string;
      /** Format: date-time */
      userModTime?: string;
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['MatchExpectedGoalsLiveDataDto'];
    };
    MatchExpectedGoalsLineUpDto: {
      player?: components['schemas']['MatchExpectedGoalsPlayerDto'][];
      stat?: components['schemas']['StatDto'][];
      contestantId?: string;
      ocContestantId?: string;
      opContestantId?: string;
      teamOfficial?: components['schemas']['TeamOfficialDto'];
      side?: string;
      matchLineUp?: components['schemas']['LineUpDto'];
    };
    MatchExpectedGoalsLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      lineUps?: components['schemas']['MatchExpectedGoalsLineUpDto'][];
      events?: components['schemas']['EventDto'][];
    };
    MatchExpectedGoalsPlayerDto: {
      stats?: components['schemas']['StatDto'][];
      matchPlayer?: components['schemas']['PlayerDto'];
      birthName?: string;
      position?: string;
      positionSide?: string;
      playerId?: string;
      ocPlayerId?: string;
      opPlayerId?: string;
      /** Format: int32 */
      shirtNumber?: number;
      lastName?: string;
      matchName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      firstName?: string;
      knownName?: string;
    };
    MatchEventsPossessionValuesDto: {
      /** Format: int64 */
      lastModified?: number;
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['MatchEventsPossessionValuesLiveDataDto'];
    };
    MatchEventsPossessionValuesEventDto: {
      /** Format: int64 */
      id?: number;
      /** Format: int32 */
      eventId?: number;
      /** Format: int32 */
      typeId?: number;
      /** Format: int32 */
      periodId?: number;
      /** Format: int32 */
      timeMin?: number;
      /** Format: int32 */
      timeSec?: number;
      contestantId?: string;
      opContestantId?: string;
      ocContestantId?: string;
      opPlayerId?: string;
      ocPlayerId?: string;
      playerId?: string;
      playerName?: string;
      /** Format: int32 */
      outcome?: number;
      /** Format: int32 */
      assist?: number;
      /** Format: int32 */
      keyPass?: number;
      /** Format: float */
      getxCoord?: number;
      /** Format: float */
      getyCoord?: number;
      /** Format: date-time */
      timestamp?: string;
      /** Format: date-time */
      lastModified?: string;
      possessionValue?: components['schemas']['MatchEventsPossessionValuesPossessionValueDto'];
    };
    MatchEventsPossessionValuesLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      events?: components['schemas']['MatchEventsPossessionValuesEventDto'][];
    };
    MatchEventsPossessionValuesPossessionValueDto: {
      pvValue?: string;
      pvAdded?: string;
    };
    MatchEventsDto: {
      /** Format: int64 */
      lastModified?: number;
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['MatchEventsLiveDataDto'];
    };
    MatchEventsEventDto: {
      /** Format: int64 */
      id?: number;
      /** Format: int32 */
      eventId?: number;
      /** Format: int32 */
      typeId?: number;
      /** Format: int32 */
      periodId?: number;
      /** Format: int32 */
      timeMin?: number;
      /** Format: int32 */
      timeSec?: number;
      contestantId?: string;
      opContestantId?: string;
      ocContestantId?: string;
      opPlayerId?: string;
      ocPlayerId?: string;
      playerId?: string;
      playerName?: string;
      /** Format: int32 */
      outcome?: number;
      /** Format: int32 */
      assist?: number;
      /** Format: int32 */
      keyPass?: number;
      /** Format: float */
      getxCoord?: number;
      /** Format: float */
      getyCoord?: number;
      /** Format: date-time */
      timestamp?: string;
      /** Format: date-time */
      lastModified?: string;
      qualifiers?: components['schemas']['MatchEventsQualifierDto'][];
    };
    MatchEventsLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      events?: components['schemas']['MatchEventsEventDto'][];
    };
    DetailedContestantDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      name?: string;
      shortName?: string;
      officialName?: string;
      code?: string;
      position?: string;
      country?: components['schemas']['CountryDto'];
      /** Format: double */
      currentPowerRating?: number;
      /** Format: double */
      highestSeasonRating?: number;
      /** Format: double */
      lowestSeasonRating?: number;
      /** Format: double */
      averageSeasonRating?: number;
      currentCompetitionRank?: string;
      currentConfederationRank?: string;
      currentGlobalRank?: string;
      phrase?: string;
      probableTeams?: string;
      empty?: boolean;
    };
    MatchDetailedDto: {
      /** Format: int64 */
      lastModified?: number;
      matchInfo?: components['schemas']['MatchDetailedInfoDto'];
      liveData?: components['schemas']['LiveDataDto'];
    };
    MatchDetailedInfoDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      coverageLevel?: string;
      optaBetting?: string;
      /** Format: date */
      date?: string;
      time?: string;
      week?: string;
      postMatch?: string;
      attendanceInfoId?: string;
      attendanceInfo?: string;
      /** Format: int32 */
      numberOfPeriods?: number;
      /** Format: int32 */
      periodLength?: number;
      /** Format: int32 */
      overtimeLength?: number;
      /** Format: date-time */
      lastUpdated?: string;
      nextMatchWinnerId?: string;
      nextMatchLoserId?: string;
      description?: string;
      sport?: components['schemas']['SportDto'];
      ruleset?: components['schemas']['RulesetDto'];
      competition?: components['schemas']['CompetitionDto'];
      tournamentCalendar?: components['schemas']['TournamentCalendarDto'];
      stage?: components['schemas']['StageDto'];
      series?: components['schemas']['SeriesDto'];
      contestants?: components['schemas']['DetailedContestantDto'][];
      venue?: components['schemas']['VenueDto'];
    };
    MatchesDetailedDto: {
      /** Format: int64 */
      totalSize?: number;
      matches?: components['schemas']['MatchDetailedDto'][];
    };
    AttackingFirstContactsDto: {
      players?: components['schemas']['McpPlayerDto'][];
    };
    CornersDto: {
      matchUuid?: string;
      /** Format: date-time */
      userModTime?: string;
      contestant?: components['schemas']['McpContestantDto'][];
    };
    EndZonesDto: {
      stat?: components['schemas']['McpStatDto'][];
    };
    MatchCornersPreviewDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      corners?: components['schemas']['CornersDto'];
    };
    McpContestantDto: {
      id?: string;
      ocId?: string;
      opId?: string;
      name?: string;
      seasonStats?: components['schemas']['McpSeasonStatsDto'];
      last25?: components['schemas']['McpSeasonStatsDto'];
      last50?: components['schemas']['McpSeasonStatsDto'];
      last100?: components['schemas']['McpSeasonStatsDto'];
      event?: components['schemas']['McpEventDto'][];
    };
    McpEventDto: {
      matchId?: string;
      ocMatchId?: string;
      /** Format: int32 */
      opMatchId?: number;
      /** Format: int64 */
      id?: number;
      /** Format: int32 */
      eventId?: number;
      /** Format: int32 */
      typeId?: number;
      /** Format: int32 */
      periodId?: number;
      /** Format: int32 */
      min?: number;
      /** Format: int32 */
      sec?: number;
      contestantId?: string;
      /** Format: int32 */
      opContestantId?: number;
      ocContestantId?: string;
      playerId?: string;
      /** Format: int32 */
      opPlayerId?: number;
      ocPlayerId?: string;
      outcome?: string;
      /** Format: int32 */
      assist?: number;
      /** Format: int32 */
      keyPass?: number;
      /** Format: float */
      x?: number;
      /** Format: float */
      y?: number;
      timestamp?: string;
      lastModified?: string;
      version?: string;
      qualifiers?: components['schemas']['McpQualifierDto'][];
    };
    McpPlayerDto: {
      id?: string;
      opId?: string;
      ocId?: string;
      firstName?: string;
      lastName?: string;
      shortFirstName?: string;
      shortLastName?: string;
      matchName?: string;
      shirtNumber?: string;
      position?: string;
      stats?: components['schemas']['McpStatDto'][];
    };
    McpQualifierDto: {
      /** Format: int64 */
      id?: number;
      /** Format: int32 */
      qualifierId?: number;
      value?: string;
    };
    McpSeasonStatsDto: {
      total?: components['schemas']['McpTotalDto'];
      fromLeft?: components['schemas']['McpTotalDto'];
      fromRight?: components['schemas']['McpTotalDto'];
    };
    McpStatDto: {
      name?: string;
      value?: string;
    };
    McpTotalDto: {
      stats?: components['schemas']['McpStatDto'][];
      attackingFirstContacts?: components['schemas']['AttackingFirstContactsDto'];
      cornerTakers?: components['schemas']['AttackingFirstContactsDto'];
      endZones?: components['schemas']['EndZonesDto'];
    };
    Mappings: unknown;
    ManagerHead2HeadDto: {
      teamOfficial?: components['schemas']['TeamOfficialDto'][];
    };
    ManagerPreviewDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      managerHead2Head?: components['schemas']['ManagerHead2HeadDto'];
      previousMeetings?: components['schemas']['PreviousMeetingsDto'];
    };
    MatchInVenueShapeDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['MatchInVenueShapeLiveDataDto'];
    };
    MatchInVenueShapeLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      shapes?: components['schemas']['ShapesDto'][];
    };
    InVenuePressureTimelineDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['InVenuePressureTimelineLiveDataDto'];
    };
    InVenuePressureTimelineLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      pressureInfo?: components['schemas']['PressureInfoDto'][];
      goals?: components['schemas']['GoalDto'][];
      missedPenalties?: components['schemas']['MissedPenaltyDto'][];
      cards?: components['schemas']['CardDto'][];
      substitutes?: components['schemas']['SubstituteDto'][];
      vars?: components['schemas']['VarDto'][];
      penaltyShots?: components['schemas']['PenaltyShotDto'][];
      matchDetailsExtra?: components['schemas']['MatchDetailsExtraDto'];
    };
    InVenueMatchTrackingEptsDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      trackingFiles?: components['schemas']['TrackingFilesDto'];
    };
    InVenueEventsDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['InVenueEventsLiveDataDto'];
    };
    InVenueEventsLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      events?: components['schemas']['EventDto'][];
    };
    InVenueAggregatedFitnessDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['InVenueAggregatedFitnessLiveDataDto'];
    };
    InVenueAggregatedFitnessLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      goals?: components['schemas']['GoalDto'][];
      missedPenalties?: components['schemas']['MissedPenaltyDto'][];
      cards?: components['schemas']['CardDto'][];
      substitutes?: components['schemas']['SubstituteDto'][];
      vars?: components['schemas']['VarDto'][];
      penaltyShots?: components['schemas']['PenaltyShotDto'][];
      fitnessStats?: components['schemas']['FitnessStatsDto'];
      lineUps?: components['schemas']['LineUpDto'][];
      events?: components['schemas']['EventsDto'][];
      matchDetailsExtra?: components['schemas']['MatchDetailsExtraDto'];
    };
    InVenueAggregatedEventsDto: {
      matchInfo?: components['schemas']['MatchInfoDto'];
      liveData?: components['schemas']['InVenueAggregatedEventsLiveDataDto'];
    };
    InVenueAggregatedEventsLiveDataDto: {
      matchDetails?: components['schemas']['MatchDetailsDto'];
      goals?: components['schemas']['GoalDto'][];
      missedPenalties?: components['schemas']['MissedPenaltyDto'][];
      cards?: components['schemas']['CardDto'][];
      substitutes?: components['schemas']['SubstituteDto'][];
      vars?: components['schemas']['VarDto'][];
      penaltyShots?: components['schemas']['PenaltyShotDto'][];
      lineUps?: components['schemas']['LineUpDto'][];
      matchDetailsExtra?: components['schemas']['MatchDetailsExtraDto'];
    };
    InjuriesDto: {
      competition?: components['schemas']['CompetitionDto'];
      tournamentCalendar?: components['schemas']['TournamentCalendarDto'];
      persons?: components['schemas']['PersonDto'][];
      /** Format: date-time */
      lastUpdated?: string;
    };
    InjuryDto: {
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      /** Format: date */
      expectedEndDate?: string;
      type?: string;
      status?: string;
    };
    PersonMetaDataHolder: {
      contestants?: components['schemas']['GenericMetaData'];
    };
    DeletionsDto: {
      /** Format: int64 */
      totalSize?: number;
      type?: string;
      entityList?: components['schemas']['DeletionsEntityDto'][];
    };
    DeletionsEntityDto: {
      id?: string;
      opId?: string;
      ocId?: string;
      /** Format: date-time */
      deletionTime?: string;
      /** Format: date-time */
      lastUpdated?: string;
    };
    DecodeDto: {
      sport?: components['schemas']['SportDto'];
      entitiesList?: components['schemas']['EntitiesDto'][];
    };
    EntitiesDto: {
      type?: string;
      /** Format: date-time */
      lastUpdated?: string;
      entityList?: components['schemas']['EntityDto'][];
    };
    EntityDto: {
      id?: string;
      name?: string;
    };
    ContestantParticipationDto: {
      contestant?: components['schemas']['ContestantDto'][];
    };
    CommentaryDto: {
      /** Format: int64 */
      lastModified?: number;
      matchInfo?: components['schemas']['MatchInfoDto'];
      messages?: components['schemas']['MessagesDto'][];
    };
    CommentaryItemDto: {
      id?: string;
      comment?: string;
      timestamp?: string;
      lastModified?: string;
      minute?: string;
      period?: string;
      second?: string;
      time?: string;
      type?: string;
      ocPlayerRef1?: string;
      ocPlayerRef2?: string;
      opPlayerRef1?: string;
      opPlayerRef2?: string;
      uuidPlayerRef1?: string;
      uuidPlayerRef2?: string;
      ocTeamRef1?: string;
      ocTeamRef2?: string;
      opTeamRef1?: string;
      opTeamRef2?: string;
      uuidTeamRef1?: string;
      uuidTeamRef2?: string;
      varCheck?: string;
    };
    AreaDto: {
      id?: string;
      ocId?: string;
      countryCode?: string;
      name?: string;
    };
    AreasDto: {
      /** Format: date-time */
      lastUpdated?: string;
      areas?: components['schemas']['AreaDto'][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Venues
   * @description Get venue information
   */
  getVenue: {
    parameters: {
      query?: {
        /** @description Venue UUID */
        venue?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Venues */
      200: {
        content: {
          'application/json': components['schemas']['VenuesDto'];
          'application/xml': components['schemas']['VenuesDto'];
        };
      };
    };
  };
  /**
   * Trophies
   * @description Get Trophies
   */
  getTrophies: {
    parameters: {
      query?: {
        /** @description Person uuid */
        prsn?: string;
        /** @description Competition */
        comp?: string;
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Trophies */
      200: {
        content: {
          'application/json': components['schemas']['TrophiesDto'];
          'application/xml': components['schemas']['TrophiesDto'];
        };
      };
    };
  };
  /**
   * Transfers
   * @description GET transfers information according to specified parameter values
   */
  getTransfers: {
    parameters: {
      query?: {
        /** @description Person uuid */
        prsn?: string;
        /** @description Date range start date (YYYY-MM-DD) */
        strtDt?: string;
        /** @description Date range end date (YYYY-MM-DD) */
        endDt?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Competition */
        comp?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Transfers */
      200: {
        content: {
          'application/json': components['schemas']['TransfersDto'];
          'application/xml': components['schemas']['TransfersDto'];
        };
      };
    };
  };
  /**
   * Tournament Schedule
   * @description Get tournament schedule
   */
  getTournamentSchedule: {
    parameters: {
      query: {
        /** @description Coverage Level */
        cvlv?: string[];
        /** @description Tournament Calendar */
        tmcl: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Tournament schedule */
      200: {
        content: {
          'application/json': components['schemas']['TournamentScheduleDto'];
          'application/xml': components['schemas']['TournamentScheduleDto'];
        };
      };
    };
  };
  /**
   * Tournament Schedule
   * @description Get tournament schedule
   */
  getTournamentSchedule_1: {
    parameters: {
      query?: {
        /** @description Coverage Level */
        cvlv?: string[];
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Tournament Calendar */
        tournamentCalendarUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Tournament schedule */
      200: {
        content: {
          'application/json': components['schemas']['TournamentScheduleDto'];
          'application/xml': components['schemas']['TournamentScheduleDto'];
        };
      };
    };
  };
  /**
   * Tournament Calendars
   * @description GET a list of Tournament Calendars
   */
  getTournamentCalendars: {
    parameters: {
      query?: {
        /** @description Stages */
        stages?: 'yes' | 'no';
        /** @description Coverage */
        coverage?: 'yes' | 'no';
        /** @description Competitions */
        comp?: string[];
        /** @description Contestant */
        ctst?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Tournament Calendars */
      200: {
        content: {
          'application/json': components['schemas']['TournamentCalendarsDto'];
          'application/xml': components['schemas']['TournamentCalendarsDto'];
        };
      };
    };
  };
  /**
   * Tournament Calendars
   * @description GET a list of Tournament Calendars
   */
  getTournamentCalendars_1: {
    parameters: {
      query?: {
        /** @description Stages */
        stages?: 'yes' | 'no';
        /** @description Coverage */
        coverage?: 'yes' | 'no';
        /** @description Competitions */
        comp?: string[];
        /** @description Contestant */
        ctst?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        type: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Tournament Calendars */
      200: {
        content: {
          'application/json': components['schemas']['TournamentCalendarsDto'];
          'application/xml': components['schemas']['TournamentCalendarsDto'];
        };
      };
    };
  };
  /**
   * Tournament Calendars
   * @description GET a list of Tournament Calendars
   */
  getTournamentCalendars_2: {
    parameters: {
      query?: {
        /** @description Stages */
        stages?: 'yes' | 'no';
        /** @description Coverage */
        coverage?: 'yes' | 'no';
        /** @description Competitions */
        comp?: string[];
        /** @description Contestant */
        ctst?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        type1: string;
        type2: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Tournament Calendars */
      200: {
        content: {
          'application/json': components['schemas']['TournamentCalendarsDto'];
          'application/xml': components['schemas']['TournamentCalendarsDto'];
        };
      };
    };
  };
  /**
   * Top performers
   * @description Get top performers ranking data
   */
  getTopPerformers: {
    parameters: {
      query: {
        /** @description Tournament Calendar */
        tmcl: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Top performers */
      200: {
        content: {
          'application/json': components['schemas']['TopPerformersDto'];
          'application/xml': components['schemas']['TopPerformersDto'];
        };
      };
    };
  };
  /**
   * Top performers
   * @description Get top performers ranking data
   */
  getTopPerformers_1: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Tournament Calendar */
        tournamentCalendarUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Top performers */
      200: {
        content: {
          'application/json': components['schemas']['TopPerformersDto'];
          'application/xml': components['schemas']['TopPerformersDto'];
        };
      };
    };
  };
  /**
   * Team and Player Forecast
   * @description Get Team and Player Forecast
   */
  getTeamPlayerPredictions: {
    parameters: {
      query: {
        /** @description Statistics */
        stat?:
          | 'yellowCard'
          | 'fouls'
          | 'redCard'
          | 'saves'
          | 'goalAssist'
          | 'minutes'
          | 'goals'
          | 'ontargetScoringAtt'
          | 'totalPass'
          | 'shotOffTarget'
          | 'blockedScoringAtt'
          | 'ownGoals'
          | 'totalTackle'
          | 'interception'
          | 'totalCross'
          | 'wasFouled'
          | 'totalOffside'
          | 'penaltyWon'
          | 'goalConceded'
          | 'penaltySaved'
          | 'optaPoints';
        /** @description Minute */
        min?: string[];
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Team and Player Forecast */
      200: {
        content: {
          'application/json': components['schemas']['TeamPlayerPredictionsOutputDto'];
          'application/xml': components['schemas']['TeamPlayerPredictionsOutputDto'];
        };
      };
    };
  };
  /**
   * Team and Player Forecast
   * @description Get Team and Player Forecast
   */
  getTeamPlayerPredictionsById: {
    parameters: {
      query?: {
        /** @description Statistics */
        stat?:
          | 'yellowCard'
          | 'fouls'
          | 'redCard'
          | 'saves'
          | 'goalAssist'
          | 'minutes'
          | 'goals'
          | 'ontargetScoringAtt'
          | 'totalPass'
          | 'shotOffTarget'
          | 'blockedScoringAtt'
          | 'ownGoals'
          | 'totalTackle'
          | 'interception'
          | 'totalCross'
          | 'wasFouled'
          | 'totalOffside'
          | 'penaltyWon'
          | 'goalConceded'
          | 'penaltySaved'
          | 'optaPoints';
        /** @description Minute */
        min?: string[];
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Team and Player Forecast */
      200: {
        content: {
          'application/json': components['schemas']['TeamPlayerPredictionsOutputDto'];
          'application/xml': components['schemas']['TeamPlayerPredictionsOutputDto'];
        };
      };
    };
  };
  /**
   * Teams
   * @description GET team data according to specified parameter values.
   */
  getTeams: {
    parameters: {
      query?: {
        /** @description Country */
        ctry?: string;
        /** @description Stage */
        stg?: string;
        /** @description Series */
        srs?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Detailed */
        detailed?: 'yes' | 'no';
        /** @description Language */
        _lcl?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Teams */
      200: {
        content: {
          'application/json': components['schemas']['TeamsDto'];
          'application/xml': components['schemas']['TeamsDto'];
        };
      };
    };
  };
  /**
   * Teams
   * @description Get team information only for a specific contestant.
   */
  getTeam: {
    parameters: {
      query?: {
        /** @description Detailed */
        detailed?: 'yes' | 'no';
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        contestantId: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Teams */
      200: {
        content: {
          'application/json': components['schemas']['TeamsDto'];
          'application/xml': components['schemas']['TeamsDto'];
        };
      };
    };
  };
  /**
   * Suspensions
   * @description Get a list of suspended players
   */
  getSuspensions: {
    parameters: {
      query?: {
        /** @description Person uuid */
        prsn?: string;
        /** @description Fixture uuid */
        fx?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Suspensions */
      200: {
        content: {
          'application/json': components['schemas']['SuspensionsDto'];
          'application/xml': components['schemas']['SuspensionsDto'];
        };
      };
    };
  };
  /**
   * Team Standings
   * @description GET team standings data according to specified parameter values.
   */
  getTeamStandings: {
    parameters: {
      query?: {
        /** @description Stage */
        stg?: string;
        /** @description Live */
        live?: 'yes' | 'no';
        /** @description Division Type */
        type?:
          | 'home'
          | 'away'
          | 'total'
          | 'form-home'
          | 'form-away'
          | 'form-total'
          | 'half-time-home'
          | 'half-time-away'
          | 'half-time-total'
          | 'attendance'
          | 'over-under'
          | 'relegation'
          | 'championship';
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Team Standings */
      200: {
        content: {
          'application/json': components['schemas']['TeamStandingsDto'];
          'application/xml': components['schemas']['TeamStandingsDto'];
        };
      };
    };
  };
  /**
   * Squads
   * @description Get squad and individual personal information
   */
  getSquads: {
    parameters: {
      query?: {
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Detailed */
        detailed?: 'yes' | 'no';
        /** @description Language */
        _lcl?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Squads */
      200: {
        content: {
          'application/json': components['schemas']['TeamSquadDto'];
          'application/xml': components['schemas']['TeamSquadDto'];
        };
      };
    };
  };
  /**
   * Seasonal Statistics
   * @description GET seasonal statistics according to specified parameter values
   */
  getSeasonalStats: {
    parameters: {
      query?: {
        /** @description Competition */
        comp?: string;
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Detailed */
        detailed?: 'yes' | 'no';
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Seasonal Stats */
      200: {
        content: {
          'application/json': components['schemas']['SeasonalStatsDto'];
          'application/xml': components['schemas']['SeasonalStatsDto'];
        };
      };
    };
  };
  /**
   * Season Power Rankings
   * @description Get Season Power Rankings
   */
  getSeasonPlayerRatingsById: {
    parameters: {
      query?: {
        /** @description Confederation */
        confed?: 'yes' | 'no';
        /** @description Rank */
        rank?: string;
        /** @description Rank date */
        rankDt?: string;
        /** @description Type */
        type?: 'men' | 'women';
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Season Power Rankings */
      200: {
        content: {
          'application/json': components['schemas']['SeasonPowerRankingsDto'];
          'application/xml': components['schemas']['SeasonPowerRankingsDto'];
        };
      };
    };
  };
  /**
   * Season Playtime
   * @description Get Season Playtime
   */
  getSeasonPlayTime: {
    parameters: {
      query?: {
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Season Playtime */
      200: {
        content: {
          'application/json': components['schemas']['SeasonPlayTimeDto'];
          'application/xml': components['schemas']['SeasonPlayTimeDto'];
        };
      };
    };
  };
  /**
   * Season Playtime
   * @description Get Season Playtime
   */
  getSeasonPlayTimeById: {
    parameters: {
      query?: {
        /** @description Contestant */
        ctst?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Tournament Calendar */
        tournamentCalendarUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Season Playtime */
      200: {
        content: {
          'application/json': components['schemas']['SeasonPlayTimeDto'];
          'application/xml': components['schemas']['SeasonPlayTimeDto'];
        };
      };
    };
  };
  /**
   * Season Player Ratings
   * @description Get Season Player Ratings
   */
  getSeasonPlayerRatingsById_1: {
    parameters: {
      query?: {
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Season Player Ratings */
      200: {
        content: {
          'application/json': components['schemas']['SeasonPlayerRatingsDto'];
          'application/xml': components['schemas']['SeasonPlayerRatingsDto'];
        };
      };
    };
  };
  /**
   * Season Expected Goals
   * @description Get Season Expected Goals
   */
  searchSeasonExpectedGoals: {
    parameters: {
      query?: {
        /** @description Competition */
        comp?: string;
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Season Expected Goals */
      200: {
        content: {
          'application/json': components['schemas']['SeasonExpectedGoalsDto'];
          'application/xml': components['schemas']['SeasonExpectedGoalsDto'];
        };
      };
    };
  };
  /**
   * Season and Tournament Simulations
   * @description Get Season and Tournament Simulations
   */
  getSeasonAndTournamentPredictions: {
    parameters: {
      query?: {
        /** @description Stage */
        stg?: string;
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Season and Tournament Simulations */
      200: {
        content: {
          'application/json': components['schemas']['SeasonAndTournamentSimulationsDto'];
          'application/xml': components['schemas']['SeasonAndTournamentSimulationsDto'];
        };
      };
    };
  };
  /**
   * Shape Remote
   * @description Get Shape Remote list
   */
  getMatchBroadcastShape: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Shape Remote */
      200: {
        content: {
          'application/json': components['schemas']['MatchBroadcastShapeDto'];
          'application/xml': components['schemas']['MatchBroadcastShapeDto'];
        };
      };
    };
  };
  /**
   * Shape Remote
   * @description Get Shape Remote list
   */
  getMatchBroadcastShapeById: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Shape Remote */
      200: {
        content: {
          'application/json': components['schemas']['MatchBroadcastShapeDto'];
          'application/xml': components['schemas']['MatchBroadcastShapeDto'];
        };
      };
    };
  };
  /**
   * Remote Pressure Timeline
   * @description Get remote pressure timeline
   */
  getRemotePressureTimeline: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Remote pressure timeline */
      200: {
        content: {
          'application/json': components['schemas']['RemotePressureTimelineDto'];
          'application/xml': components['schemas']['RemotePressureTimelineDto'];
        };
      };
    };
  };
  /**
   * Remote Pressure Timeline
   * @description Get remote pressure timeline
   */
  getRemotePressureTimelineById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Remote pressure timeline */
      200: {
        content: {
          'application/json': components['schemas']['RemotePressureTimelineDto'];
          'application/xml': components['schemas']['RemotePressureTimelineDto'];
        };
      };
    };
  };
  /**
   * Remote Match Tracking EPTS
   * @description Get remote match tracking epts data
   */
  getRemoteMatchTrackingEpts: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Remote Match Tracking EPTS */
      200: {
        content: {
          'application/json': components['schemas']['RemoteMatchTrackingEptsDto'];
          'application/xml': components['schemas']['RemoteMatchTrackingEptsDto'];
        };
      };
    };
  };
  /**
   * Remote Match Tracking EPTS
   * @description Get remote match tracking epts data
   */
  getRemoteMatchTrackingEptsById: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Remote Match Tracking EPTS */
      200: {
        content: {
          'application/json': components['schemas']['RemoteMatchTrackingEptsDto'];
          'application/xml': components['schemas']['RemoteMatchTrackingEptsDto'];
        };
      };
    };
  };
  /**
   * Enriched Soccer Events Remote
   * @description Get Enriched Soccer Events (Remote) list
   */
  getBroadcastEvents: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Enriched Soccer Events Remote */
      200: {
        content: {
          'application/json': components['schemas']['BroadcastEventsDto'];
          'application/xml': components['schemas']['BroadcastEventsDto'];
        };
      };
    };
  };
  /**
   * Enriched Soccer Events Remote
   * @description Get Enriched Soccer Events (Remote) list
   */
  getBroadcastEventsById: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Enriched Soccer Events Remote */
      200: {
        content: {
          'application/json': components['schemas']['BroadcastEventsDto'];
          'application/xml': components['schemas']['BroadcastEventsDto'];
        };
      };
    };
  };
  /**
   * Remote Aggregated Fitness
   * @description Get remote aggregated fitness
   */
  getRemoteAggregatedFitness: {
    parameters: {
      query: {
        /** @description Type */
        type?: 'fifa' | 'historical';
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Remote aggregated fitness */
      200: {
        content: {
          'application/json': components['schemas']['RemoteAggregatedFitnessDto'];
          'application/xml': components['schemas']['RemoteAggregatedFitnessDto'];
        };
      };
    };
  };
  /**
   * Remote Aggregated Fitness
   * @description Get remote aggregated fitness
   */
  getRemoteAggregatedFitnessByID: {
    parameters: {
      query?: {
        /** @description Type */
        type?: 'fifa' | 'historical';
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Remote aggregated fitness */
      200: {
        content: {
          'application/json': components['schemas']['RemoteAggregatedFitnessDto'];
          'application/xml': components['schemas']['RemoteAggregatedFitnessDto'];
        };
      };
    };
  };
  /**
   * Remote Aggregated Events
   * @description Get remote aggregated events
   */
  getRemoteAggregatedEvents: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Remote aggregated events */
      200: {
        content: {
          'application/json': components['schemas']['RemoteAggregatedEventsDto'];
          'application/xml': components['schemas']['RemoteAggregatedEventsDto'];
        };
      };
    };
  };
  /**
   * Remote Aggregated Events
   * @description Get remote aggregated events
   */
  getRemoteAggregatedEventsById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Remote aggregated events */
      200: {
        content: {
          'application/json': components['schemas']['RemoteAggregatedEventsDto'];
          'application/xml': components['schemas']['RemoteAggregatedEventsDto'];
        };
      };
    };
  };
  /**
   * Referee Stats
   * @description Get Referee Stats
   */
  getRefereeStats: {
    parameters: {
      query?: {
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Referee Stats */
      200: {
        content: {
          'application/json': components['schemas']['RefereeStatsDto'];
          'application/xml': components['schemas']['RefereeStatsDto'];
        };
      };
    };
  };
  /**
   * Referees
   * @description Get information about referees
   */
  getReferees: {
    parameters: {
      query?: {
        /** @description Person uuid */
        prsn?: string;
        /** @description Stage uuid */
        stg?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Referees */
      200: {
        content: {
          'application/json': components['schemas']['RefereesDto'];
          'application/xml': components['schemas']['RefereesDto'];
        };
      };
    };
  };
  /**
   * Rankings
   * @description Get rankings data
   */
  getMatchPreview: {
    parameters: {
      query: {
        /** @description Tournament Calendar */
        tmcl: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Rankings */
      200: {
        content: {
          'application/json': components['schemas']['RankingsDto'];
          'application/xml': components['schemas']['RankingsDto'];
        };
      };
    };
  };
  /**
   * Rankings
   * @description Get rankings data
   */
  getMatchPreview_1: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Tournament Calendar */
        tournamentCalendarUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Rankings */
      200: {
        content: {
          'application/json': components['schemas']['RankingsDto'];
          'application/xml': components['schemas']['RankingsDto'];
        };
      };
    };
  };
  /**
   * Possession events
   * @description Get possession events
   */
  searchPossessionEvents: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Possession events */
      200: {
        content: {
          'application/json': components['schemas']['PossessionEventsDto'];
          'application/xml': components['schemas']['PossessionEventsDto'];
        };
      };
    };
  };
  /**
   * Possession events
   * @description Get possession events
   */
  getPossessionEventsById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Possession events */
      200: {
        content: {
          'application/json': components['schemas']['PossessionEventsDto'];
          'application/xml': components['schemas']['PossessionEventsDto'];
        };
      };
    };
  };
  /**
   * Possession
   * @description Get possession
   */
  searchPossession: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Possession */
      200: {
        content: {
          'application/json': components['schemas']['PossessionTerritoryDto'];
          'application/xml': components['schemas']['PossessionTerritoryDto'];
        };
      };
    };
  };
  /**
   * Possession
   * @description Get possession
   */
  getPossessionById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Possession */
      200: {
        content: {
          'application/json': components['schemas']['PossessionTerritoryDto'];
          'application/xml': components['schemas']['PossessionTerritoryDto'];
        };
      };
    };
  };
  /**
   * Player Possession Value
   * @description Get Possession Values of a player
   */
  getPossessionValues: {
    parameters: {
      query: {
        /** @description Player uuid */
        prsn: string;
        /** @description Language */
        _lcl?: string;
        /** @description Tournament Calendar */
        tmcl: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Player Possession Value */
      200: {
        content: {
          'application/json': components['schemas']['PlayerPossessionValuesDTO'];
          'application/xml': components['schemas']['PlayerPossessionValuesDTO'];
        };
      };
    };
  };
  /**
   * Player Possession Value
   * @description Get Possession Values of a player
   */
  getPossessionValues_1: {
    parameters: {
      query: {
        /** @description Language */
        _lcl?: string;
        /** @description Tournament Calendar */
        tmcl: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
        /** @description Player uuid */
        playerUuid: string;
      };
    };
    responses: {
      /** @description Player Possession Value */
      200: {
        content: {
          'application/json': components['schemas']['PlayerPossessionValuesDTO'];
          'application/xml': components['schemas']['PlayerPossessionValuesDTO'];
        };
      };
    };
  };
  /**
   * Player Contract
   * @description Get contract related information for a player
   */
  getPlayerContracts: {
    parameters: {
      query?: {
        /** @description Person uuid or person legacy Opta ID */
        prsn?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Player Contract */
      200: {
        content: {
          'application/json': components['schemas']['PlayerContractDto'];
          'application/xml': components['schemas']['PlayerContractDto'];
        };
      };
    };
  };
  /**
   * Player Contract
   * @description Get contract related information for a player
   */
  getPlayerContract: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Person uuid */
        personUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Player Contract */
      200: {
        content: {
          'application/json': components['schemas']['PlayerContractDto'];
          'application/xml': components['schemas']['PlayerContractDto'];
        };
      };
    };
  };
  /**
   * Player career
   * @description Get information about player career
   */
  getPlayerCareers: {
    parameters: {
      query?: {
        /** @description Person uuid */
        prsn?: string;
        /** @description Does the player have an active membership at the specified contestant */
        active?: 'yes' | 'no';
        /** @description Language */
        _lcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Player career */
      200: {
        content: {
          'application/json': components['schemas']['PlayerCareerDto'];
          'application/xml': components['schemas']['PlayerCareerDto'];
        };
      };
    };
  };
  /**
   * Player career
   * @description Get information about player career
   */
  getCareerForPerson: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Person uuid */
        personUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Player career */
      200: {
        content: {
          'application/json': components['schemas']['PlayerCareerDto'];
          'application/xml': components['schemas']['PlayerCareerDto'];
        };
      };
    };
  };
  /**
   * Pass Matrix
   * @description Get pass matrix
   */
  searchPassMatrix: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Pass Matrix */
      200: {
        content: {
          'application/json': components['schemas']['PassMatrixDto'];
          'application/xml': components['schemas']['PassMatrixDto'];
        };
      };
    };
  };
  /**
   * Pass Matrix
   * @description Get pass matrix
   */
  getPassMatrixById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Pass matrix */
      200: {
        content: {
          'application/json': components['schemas']['PassMatrixDto'];
          'application/xml': components['schemas']['PassMatrixDto'];
        };
      };
    };
  };
  /**
   * NLG match preview
   * @description Get a Natural Language Generation match preview
   */
  getNlgMatchPreview: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description NLG match preview */
      200: {
        content: {
          'application/json': components['schemas']['NlgMatchPreviewDto'];
          'application/xml': components['schemas']['NlgMatchPreviewDto'];
        };
      };
    };
  };
  /**
   * NLG match preview
   * @description Get a Natural Language Generation match preview
   */
  getNlgMatchPreview_1: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description NLG match preview */
      200: {
        content: {
          'application/json': components['schemas']['NlgMatchPreviewDto'];
          'application/xml': components['schemas']['NlgMatchPreviewDto'];
        };
      };
    };
  };
  /**
   * NLG Dynamic Player Bios
   * @description Get a summary of top-level player information
   */
  getPlayerBios: {
    parameters: {
      query?: {
        /** @description Person uuid */
        prsn?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description NLG Dynamic Player Bios */
      200: {
        content: {
          'application/json': components['schemas']['NlgPlayerBioDto'];
          'application/xml': components['schemas']['NlgPlayerBioDto'];
        };
      };
    };
  };
  /**
   * NLG Dynamic Player Bios
   * @description Get a summary of top-level player information
   */
  getBioForPerson: {
    parameters: {
      query?: {
        /** @description Bio type */
        bioType?: 'national' | 'club';
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Person uuid */
        personUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description NLG Dynamic Player Bios */
      200: {
        content: {
          'application/json': components['schemas']['NlgPlayerBioDto'];
          'application/xml': components['schemas']['NlgPlayerBioDto'];
        };
      };
    };
  };
  /**
   * NLG Match Recap
   * @description GET Match Recap NLG data
   */
  getNlgMatchPreview_2: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description NLG Match Recap */
      200: {
        content: {
          'application/json': components['schemas']['NlgMatchRecapDto'];
          'application/xml': components['schemas']['NlgMatchRecapDto'];
        };
      };
    };
  };
  /**
   * NLG Match Recap
   * @description GET Match Recap NLG data
   */
  getNlgMatchRecap: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description NLG Match Recap */
      200: {
        content: {
          'application/json': components['schemas']['NlgMatchRecapDto'];
          'application/xml': components['schemas']['NlgMatchRecapDto'];
        };
      };
    };
  };
  /**
   * TV Listings
   * @description Get matches broadcasting information
   */
  getMatchesTvListing: {
    parameters: {
      query?: {
        /** @description Fixture uuid(s) */
        fx?: string[];
        /** @description Contestant */
        ctst?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description TV Listings */
      200: {
        content: {
          'application/json': components['schemas']['MatchesTvListingDto'];
          'application/xml': components['schemas']['MatchesTvListingDto'];
        };
      };
    };
  };
  /**
   * TV Listing
   * @description Get match broadcasting information
   */
  getMatchTvListing: {
    parameters: {
      query?: {
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description TV Listing */
      200: {
        content: {
          'application/json': components['schemas']['MatchTvListingDto'];
          'application/xml': components['schemas']['MatchTvListingDto'];
        };
      };
    };
  };
  /**
   * Match Tracking
   * @description Get match tracking data
   */
  getMatchTracking: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Tracking */
      200: {
        content: {
          'application/json': components['schemas']['MatchTrackingDto'];
          'application/xml': components['schemas']['MatchTrackingDto'];
        };
      };
    };
  };
  /**
   * Match Tracking
   * @description Get match tracking data
   */
  getMatchTrackingById: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Tracking */
      200: {
        content: {
          'application/json': components['schemas']['MatchTrackingDto'];
          'application/xml': components['schemas']['MatchTrackingDto'];
        };
      };
    };
  };
  /**
   * Match Stats
   * @description Get match stats
   */
  getMatchesStats: {
    parameters: {
      query?: {
        /** @description People */
        people?: string;
        /** @description Opta Betting coverage */
        optaBetting?: 'yes' | 'no' | '1' | '2';
        /** @description Stage */
        stg?: string;
        /** @description Series */
        srs?: string;
        /** @description Match Date */
        'mt.mDt'?: string;
        /** @description Status */
        status?: (
          | 'fixture'
          | 'playing'
          | 'played'
          | 'cancelled'
          | 'postponed'
          | 'suspended'
          | 'all'
        )[];
        /** @description Week */
        week?: number;
        /** @description Person uuid */
        prsn?: string;
        /** @description Person type */
        prsntp?: 'player' | 'teamofficial';
        /** @description Delta */
        _dlt?: string;
        /** @description Fields */
        _fld?: string[];
        /** @description Fixture uuid(s) */
        fx?: string[];
        /** @description Detailed */
        detailed?: 'yes' | 'no';
        /** @description Competitions */
        comp?: string[];
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Order type */
        _ordSrt?: 'asc' | 'desc';
        /** @description Language */
        _lcl?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match */
      200: {
        content: {
          'application/json':
            | components['schemas']['MatchStatsDto']
            | components['schemas']['MatchesStatsDto'];
          'application/xml':
            | components['schemas']['MatchStatsDto']
            | components['schemas']['MatchesStatsDto'];
        };
      };
    };
  };
  /**
   * Match Stats
   * @description Get match stats
   */
  getMatchStats: {
    parameters: {
      query?: {
        /** @description People */
        people?: string;
        /** @description Opta Betting coverage */
        optaBetting?: 'yes' | 'no' | '1' | '2';
        /** @description Stage */
        stg?: string;
        /** @description Series */
        srs?: string;
        /** @description Match Date */
        'mt.mDt'?: string;
        /** @description Status */
        status?: (
          | 'fixture'
          | 'playing'
          | 'played'
          | 'cancelled'
          | 'postponed'
          | 'suspended'
          | 'all'
        )[];
        /** @description Week */
        week?: number;
        /** @description Delta */
        _dlt?: string;
        /** @description Fields */
        _fld?: string[];
        /** @description Detailed */
        detailed?: 'yes' | 'no';
        /** @description Order type */
        _ordSrt?: 'asc' | 'desc';
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Stats */
      200: {
        content: {
          'application/json': components['schemas']['MatchStatsDto'];
          'application/xml': components['schemas']['MatchStatsDto'];
        };
      };
    };
  };
  /**
   * Match Reference
   * @description Get match reference
   */
  getMatchReferences: {
    parameters: {
      query?: {
        /** @description Feed type */
        type?: 'ma3' | 'ma13';
        /** @description Datetime YYYY-MM-DDThh:mm:ssZ or milliseconds since the epoch */
        _rdlt?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Reference */
      200: {
        content: {
          'application/json': components['schemas']['MatchReferenceDto'];
          'application/xml': components['schemas']['MatchReferenceDto'];
        };
      };
    };
  };
  /**
   * Match Provisional LineUps
   * @description Get matches lineups
   */
  searchMatchProvisionalLineUps: {
    parameters: {
      query?: {
        /** @description Fixture uuid */
        fx?: string;
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description LineUps */
      200: {
        content: {
          'application/json': components['schemas']['MatchesProvisionalLineUpsDto'];
          'application/xml': components['schemas']['MatchesProvisionalLineUpsDto'];
        };
      };
    };
  };
  /**
   * Match Provisional LineUps
   * @description Get match lineups
   */
  getMatchProvisionalLineUpsById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description LineUps */
      200: {
        content: {
          'application/json': components['schemas']['MatchProvisionalLineUpsDto'];
          'application/xml': components['schemas']['MatchProvisionalLineUpsDto'];
        };
      };
    };
  };
  /**
   * Match Preview
   * @description Get match preview
   */
  getMatchPreview_2: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ModelAndView'];
        };
      };
    };
  };
  /**
   * Match Preview
   * @description Get match preview
   */
  getMatchPreviewById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Preview */
      200: {
        content: {
          'application/json': components['schemas']['MatchPreviewDto'];
          'application/xml': components['schemas']['MatchPreviewDto'];
        };
      };
    };
  };
  /**
   * Match Possession Values
   * @description Get match possession values
   */
  getPossessionValues_2: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Possession Values */
      200: {
        content: {
          'application/json': components['schemas']['MatchPossessionValuesDto'];
          'application/xml': components['schemas']['MatchPossessionValuesDto'];
        };
      };
    };
  };
  /**
   * Match Possession Values
   * @description Get match possession values
   */
  getPossessionValuesById: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Possession Values */
      200: {
        content: {
          'application/json': components['schemas']['MatchPossessionValuesDto'];
          'application/xml': components['schemas']['MatchPossessionValuesDto'];
        };
      };
    };
  };
  /**
   * Match Playtime
   * @description MA43
   */
  getMatchPlayTimeById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Get match playtime */
      200: {
        content: {
          'application/json': components['schemas']['MatchPlayTimeDto'];
          'application/xml': components['schemas']['MatchPlayTimeDto'];
        };
      };
    };
  };
  /**
   * Match player ratings
   * @description Get player ratings for a match
   */
  getPlayerRatingsById: {
    parameters: {
      query: {
        /** @description Index score */
        indexscore?: 'yes' | 'no';
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match player ratings */
      200: {
        content: {
          'application/json': components['schemas']['MatchPlayerRatingsDto'];
          'application/xml': components['schemas']['MatchPlayerRatingsDto'];
        };
      };
    };
  };
  /**
   * Match player ratings
   * @description Get player ratings for a match
   */
  getPlayerRatingsByAssetUuid: {
    parameters: {
      query?: {
        /** @description Index score */
        indexscore?: 'yes' | 'no';
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match player ratings */
      200: {
        content: {
          'application/json': components['schemas']['MatchPlayerRatingsDto'];
          'application/xml': components['schemas']['MatchPlayerRatingsDto'];
        };
      };
    };
  };
  /**
   * Match penalties preview
   * @description Get a preview of penalties data
   */
  getPenaltiesByAssetUuid: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match penalties preview */
      200: {
        content: {
          'application/json': components['schemas']['MatchPenaltiesPreviewDto'];
          'application/xml': components['schemas']['MatchPenaltiesPreviewDto'];
        };
      };
    };
  };
  /**
   * Match penalties preview
   * @description Get a preview of penalties data
   */
  getPenaltiesById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match penalties preview */
      200: {
        content: {
          'application/json': components['schemas']['MatchPenaltiesPreviewDto'];
          'application/xml': components['schemas']['MatchPenaltiesPreviewDto'];
        };
      };
    };
  };
  /**
   * Live win probability
   * @description Get match win probability data
   */
  searchLiveWinProbability: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Live win probability */
      200: {
        content: {
          'application/json': components['schemas']['LiveWinProbabilityDto'];
          'application/xml': components['schemas']['LiveWinProbabilityDto'];
        };
      };
    };
  };
  /**
   * Live win probability
   * @description Get match win probability data
   */
  getLiveWinProbabilityById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Live win probability */
      200: {
        content: {
          'application/json': components['schemas']['LiveWinProbabilityDto'];
          'application/xml': components['schemas']['LiveWinProbabilityDto'];
        };
      };
    };
  };
  /**
   * Automated insights
   * @description Get real-time Insights and comments for a match
   */
  getMatchInsights: {
    parameters: {
      query: {
        /** @description Match status */
        state?: 'pre' | 'live' | 'post' | 'all';
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Automated insights */
      200: {
        content: {
          'application/json': components['schemas']['MatchInsightsDto'];
          'application/xml': components['schemas']['MatchInsightsDto'];
        };
      };
    };
  };
  /**
   * Automated insights
   * @description Get real-time Insights and comments for a match
   */
  getMatchInsightsById: {
    parameters: {
      query?: {
        /** @description Match status */
        state?: 'pre' | 'live' | 'post' | 'all';
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Automated insights */
      200: {
        content: {
          'application/json': components['schemas']['MatchInsightsDto'];
          'application/xml': components['schemas']['MatchInsightsDto'];
        };
      };
    };
  };
  /**
   * Match Fitness
   * @description Get match fitness
   */
  getMatchFitness: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Fitness */
      200: {
        content: {
          'application/json': components['schemas']['MatchFitnessDto'];
          'application/xml': components['schemas']['MatchFitnessDto'];
        };
      };
    };
  };
  /**
   * Match Fitness
   * @description Get match fitness
   */
  getMatchFitnessById: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Fitness */
      200: {
        content: {
          'application/json': components['schemas']['MatchFitnessDto'];
          'application/xml': components['schemas']['MatchFitnessDto'];
        };
      };
    };
  };
  /**
   * Match facts betting
   * @description Get automated betting match facts
   */
  searchMatchFactsBetting: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match facts betting */
      200: {
        content: {
          'application/json': components['schemas']['MatchFactsBettingDto'];
          'application/xml': components['schemas']['MatchFactsBettingDto'];
        };
      };
    };
  };
  /**
   * Match facts betting
   * @description Get automated betting match facts
   */
  getMatchFactsBettingById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match facts betting */
      200: {
        content: {
          'application/json': components['schemas']['MatchFactsBettingDto'];
          'application/xml': components['schemas']['MatchFactsBettingDto'];
        };
      };
    };
  };
  /**
   * Match facts all
   * @description Get all match facts
   */
  searchMatchFactsAll: {
    parameters: {
      query: {
        /** @description Match status */
        state?: 'pre' | 'live' | 'post' | 'all';
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match facts all */
      200: {
        content: {
          'application/json': components['schemas']['MatchFactsAllDto'];
          'application/xml': components['schemas']['MatchFactsAllDto'];
        };
      };
    };
  };
  /**
   * Match facts all
   * @description Get all match facts
   */
  getMatchFactsAllById: {
    parameters: {
      query?: {
        /** @description Match status */
        state?: 'pre' | 'live' | 'post' | 'all';
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match facts all */
      200: {
        content: {
          'application/json': components['schemas']['MatchFactsAllDto'];
          'application/xml': components['schemas']['MatchFactsAllDto'];
        };
      };
    };
  };
  /**
   * Match facts
   * @description Get match facts
   */
  searchMatchFacts: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match facts */
      200: {
        content: {
          'application/json': components['schemas']['MatchFactsDto'];
          'application/xml': components['schemas']['MatchFactsDto'];
        };
      };
    };
  };
  /**
   * Match facts
   * @description Get match facts
   */
  getMatchFactsById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match facts */
      200: {
        content: {
          'application/json': components['schemas']['MatchFactsDto'];
          'application/xml': components['schemas']['MatchFactsDto'];
        };
      };
    };
  };
  /**
   * Match expected goals
   * @description Get match expected goals
   */
  getMatchExpectedGoals: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match expected goals */
      200: {
        content: {
          'application/json': components['schemas']['MatchExpectedGoalsDto'];
          'application/xml': components['schemas']['MatchExpectedGoalsDto'];
        };
      };
    };
  };
  /**
   * Match expected goals
   * @description Get match expected goals
   */
  getMatchExpectedGoalsById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match expected goals */
      200: {
        content: {
          'application/json': components['schemas']['MatchExpectedGoalsDto'];
          'application/xml': components['schemas']['MatchExpectedGoalsDto'];
        };
      };
    };
  };
  /**
   * Match Events Possession Value
   * @description Get Possession Values mapped to Events happening in a particular match that's queried for.
   */
  getPossessionValues_3: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Events Possession Value */
      200: {
        content: {
          'application/json': components['schemas']['MatchEventsPossessionValuesDto'];
          'application/xml': components['schemas']['MatchEventsPossessionValuesDto'];
        };
      };
    };
  };
  /**
   * Match Events Possession Value
   * @description Get Possession Values mapped to Events happening in a particular match that's queried for.
   */
  getPossessionValuesById_1: {
    parameters: {
      query?: {
        /** @description Person uuid */
        prsn?: string;
        /** @description Event Type */
        type?: string[];
        /** @description Contestant */
        ctst?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Events Possession Value */
      200: {
        content: {
          'application/json': components['schemas']['MatchEventsPossessionValuesDto'];
          'application/xml': components['schemas']['MatchEventsPossessionValuesDto'];
        };
      };
    };
  };
  /**
   * Match Events
   * @description Get match events
   */
  searchMatchEvents: {
    parameters: {
      query: {
        /** @description Person uuid */
        prsn?: string;
        /** @description Type id(s) */
        type?: string[];
        /** @description Live */
        timeLive?: 'yes' | 'no';
        /** @description Fixture uuid */
        fx: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Events */
      200: {
        content: {
          'application/json': components['schemas']['MatchEventsDto'];
          'application/xml': components['schemas']['MatchEventsDto'];
        };
      };
    };
  };
  /**
   * Match Events
   * @description Get match events
   */
  getMatchEventsById: {
    parameters: {
      query?: {
        /** @description Person uuid */
        prsn?: string;
        /** @description Type id(s) */
        type?: string[];
        /** @description Live */
        timeLive?: 'yes' | 'no';
        /** @description Contestant */
        ctst?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Events */
      200: {
        content: {
          'application/json': components['schemas']['MatchEventsDto'];
          'application/xml': components['schemas']['MatchEventsDto'];
        };
      };
    };
  };
  /**
   * Matches Details
   * @description Get matches details
   */
  getMatches: {
    parameters: {
      query?: {
        /** @description Live */
        live?: 'yes' | 'no';
        /** @description Lineups */
        lineups?: 'yes' | 'no';
        /** @description Second Contestant */
        ctst2?: string;
        /** @description Stage */
        stg?: string;
        /** @description Series */
        srs?: string;
        /** @description Match Date */
        'mt.mDt'?: string;
        /** @description Status */
        status?: (
          | 'fixture'
          | 'playing'
          | 'played'
          | 'cancelled'
          | 'postponed'
          | 'suspended'
          | 'all'
        )[];
        /** @description Coverage Level */
        cvlv?: string[];
        /** @description Week */
        week?: number;
        /** @description Person uuid */
        prsn?: string;
        /** @description Person type */
        prsntp?: 'player' | 'teamofficial';
        /** @description Delta */
        _dlt?: string;
        /** @description Fields */
        _fld?: string[];
        /** @description Fixture uuid(s) */
        fx?: string[];
        /** @description Competitions */
        comp?: string[];
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Order type */
        _ordSrt?: 'asc' | 'desc';
        /** @description Language */
        _lcl?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Matches detailed */
      200: {
        content: {
          'application/json': components['schemas']['MatchesDetailedDto'];
          'application/xml': components['schemas']['MatchesDetailedDto'];
        };
      };
    };
  };
  /**
   * Match Details
   * @description Get match details
   */
  getMatch: {
    parameters: {
      query?: {
        /** @description Live */
        live?: 'yes' | 'no';
        /** @description Lineups */
        lineups?: 'yes' | 'no';
        /** @description Stage */
        stg?: string;
        /** @description Series */
        srs?: string;
        /** @description Match Date */
        'mt.mDt'?: string;
        /** @description Status */
        status?: (
          | 'fixture'
          | 'playing'
          | 'played'
          | 'cancelled'
          | 'postponed'
          | 'suspended'
          | 'all'
        )[];
        /** @description Coverage Level */
        cvlv?: string[];
        /** @description Week */
        week?: number;
        /** @description Delta */
        _dlt?: string;
        /** @description Fields */
        _fld?: string[];
        /** @description Order type */
        _ordSrt?: 'asc' | 'desc';
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match */
      200: {
        content: {
          'application/json': components['schemas']['MatchDto'];
          'application/xml': components['schemas']['MatchDto'];
        };
      };
    };
  };
  /**
   * Match Corners Preview
   * @description Get Match Corners Preview
   */
  findMatchCornersPreview: {
    parameters: {
      query?: {
        /** @description Fixture uuid */
        fx?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Corners Preview */
      200: {
        content: {
          'application/json': components['schemas']['MatchCornersPreviewDto'];
          'application/xml': components['schemas']['MatchCornersPreviewDto'];
        };
      };
    };
  };
  /**
   * Match Corners Preview
   * @description Get Match Corners Preview
   */
  findMatchCornersPreviewById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match Corners Preview */
      200: {
        content: {
          'application/json': components['schemas']['MatchCornersPreviewDto'];
          'application/xml': components['schemas']['MatchCornersPreviewDto'];
        };
      };
    };
  };
  /**
   * Matches
   * @description Get matches
   */
  getMatches_1: {
    parameters: {
      query?: {
        /** @description Live */
        live?: 'yes' | 'no';
        /** @description Lineups */
        lineups?: 'yes' | 'no';
        /** @description Opta Betting coverage */
        optaBetting?: 'yes' | 'no' | '1' | '2';
        /** @description Second Contestant */
        ctst2?: string;
        /** @description Stage */
        stg?: string;
        /** @description Series */
        srs?: string;
        /** @description Match Date */
        'mt.mDt'?: string;
        /** @description Status */
        status?: (
          | 'fixture'
          | 'playing'
          | 'played'
          | 'cancelled'
          | 'postponed'
          | 'suspended'
          | 'all'
        )[];
        /** @description Coverage Level */
        cvlv?: string[];
        /** @description Week */
        week?: number;
        /** @description Person uuid */
        prsn?: string;
        /** @description Person type */
        prsntp?: 'player' | 'teamofficial';
        /** @description Delta */
        _dlt?: string;
        /** @description Fields */
        _fld?: string[];
        /** @description Fixture uuid(s) */
        fx?: string[];
        /** @description Competitions */
        comp?: string[];
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Order type */
        _ordSrt?: 'asc' | 'desc';
        /** @description Language */
        _lcl?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Matches */
      200: {
        content: {
          'application/json': components['schemas']['MatchesDto'];
          'application/xml': components['schemas']['MatchesDto'];
        };
      };
    };
  };
  /**
   * Match
   * @description Get match
   */
  getMatch_1: {
    parameters: {
      query?: {
        /** @description Live */
        live?: 'yes' | 'no';
        /** @description Lineups */
        lineups?: 'yes' | 'no';
        /** @description Opta Betting coverage */
        optaBetting?: 'yes' | 'no' | '1' | '2';
        /** @description Stage */
        stg?: string;
        /** @description Series */
        srs?: string;
        /** @description Match Date */
        'mt.mDt'?: string;
        /** @description Status */
        status?: (
          | 'fixture'
          | 'playing'
          | 'played'
          | 'cancelled'
          | 'postponed'
          | 'suspended'
          | 'all'
        )[];
        /** @description Coverage Level */
        cvlv?: string[];
        /** @description Week */
        week?: number;
        /** @description Delta */
        _dlt?: string;
        /** @description Fields */
        _fld?: string[];
        /** @description Order type */
        _ordSrt?: 'asc' | 'desc';
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Match */
      200: {
        content: {
          'application/json': components['schemas']['MatchDto'];
          'application/xml': components['schemas']['MatchDto'];
        };
      };
    };
  };
  /**
   * Mapping
   * @description Get mapping
   */
  getMappingById: {
    parameters: {
      query?: {
        /** @description Supplier and entity type */
        idType?: unknown;
        /** @description List of IDs */
        idList?: string[];
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
      };
    };
    responses: {
      /** @description Mapping */
      200: {
        content: {
          'application/json': components['schemas']['Mappings'];
          'application/xml': components['schemas']['Mappings'];
        };
      };
    };
  };
  /**
   * Manager Preview
   * @description Get manager preview
   */
  getManagerPreview: {
    parameters: {
      query?: {
        /** @description Fixture uuid */
        fx?: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Manager Preview */
      200: {
        content: {
          'application/json': components['schemas']['ManagerPreviewDto'];
          'application/xml': components['schemas']['ManagerPreviewDto'];
        };
      };
    };
  };
  /**
   * Manager Preview
   * @description Get manager preview
   */
  getManagerPreviewById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Manager Preview */
      200: {
        content: {
          'application/json': components['schemas']['ManagerPreviewDto'];
          'application/xml': components['schemas']['ManagerPreviewDto'];
        };
      };
    };
  };
  /**
   * Shape in-Venue
   * @description Get list of all the shapes and formations with which a team has played in a match
   */
  getMatchInVenueShape: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Shape in-Venue */
      200: {
        content: {
          'application/json': components['schemas']['MatchInVenueShapeDto'];
          'application/xml': components['schemas']['MatchInVenueShapeDto'];
        };
      };
    };
  };
  /**
   * Shape in-Venue
   * @description Get list of all the shapes and formations with which a team has played in a match
   */
  getMatchInVenueShapeById: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Shape in-Venue */
      200: {
        content: {
          'application/json': components['schemas']['MatchInVenueShapeDto'];
          'application/xml': components['schemas']['MatchInVenueShapeDto'];
        };
      };
    };
  };
  /**
   * In venue Pressure Timelines
   * @description Get timelines
   */
  getInVenuePressureTimeline: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description In venue pressure timelines */
      200: {
        content: {
          'application/json': components['schemas']['InVenuePressureTimelineDto'];
          'application/xml': components['schemas']['InVenuePressureTimelineDto'];
        };
      };
    };
  };
  /**
   * In venue Pressure Timelines
   * @description Get timelines
   */
  getInVenuePressureTimelineById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description In venue pressure timelines */
      200: {
        content: {
          'application/json': components['schemas']['InVenuePressureTimelineDto'];
          'application/xml': components['schemas']['InVenuePressureTimelineDto'];
        };
      };
    };
  };
  /**
   * InVenue Match Tracking EPTS
   * @description Get invenue match tracking epts data
   */
  getInVenueMatchTrackingEpts: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description InVenue Match Tracking EPTS */
      200: {
        content: {
          'application/json': components['schemas']['InVenueMatchTrackingEptsDto'];
          'application/xml': components['schemas']['InVenueMatchTrackingEptsDto'];
        };
      };
    };
  };
  /**
   * InVenue Match Tracking EPTS
   * @description Get invenue match tracking epts data
   */
  getInVenueMatchTrackingEptsById: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description InVenue Match Tracking EPTS */
      200: {
        content: {
          'application/json': components['schemas']['InVenueMatchTrackingEptsDto'];
          'application/xml': components['schemas']['InVenueMatchTrackingEptsDto'];
        };
      };
    };
  };
  /**
   * Enriched Soccer Event in-Venue
   * @description Get enriched soccer events (in venue) list
   */
  getInVenueEvents: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Enriched Soccer Event in-Venue */
      200: {
        content: {
          'application/json': components['schemas']['InVenueEventsDto'];
          'application/xml': components['schemas']['InVenueEventsDto'];
        };
      };
    };
  };
  /**
   * Enriched Soccer Event in-Venue
   * @description Get enriched soccer events (in venue) list
   */
  getInVenueEventsById: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Enriched Soccer Event in-Venue */
      200: {
        content: {
          'application/json': components['schemas']['InVenueEventsDto'];
          'application/xml': components['schemas']['InVenueEventsDto'];
        };
      };
    };
  };
  /**
   * In Venue Aggregated Fitness
   * @description Get in venue aggregated fitness
   */
  getInVenueAggregatedFitness: {
    parameters: {
      query: {
        /** @description Type */
        type?: unknown;
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description In venue aggregated fitness */
      200: {
        content: {
          'application/json': components['schemas']['InVenueAggregatedFitnessDto'];
          'application/xml': components['schemas']['InVenueAggregatedFitnessDto'];
        };
      };
    };
  };
  /**
   * In Venue Aggregated Fitness
   * @description Get in venue aggregated fitness
   */
  getInVenueAggregatedFitnessById: {
    parameters: {
      query?: {
        /** @description Type */
        type?: unknown;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description In venue aggregated fitness */
      200: {
        content: {
          'application/json': components['schemas']['InVenueAggregatedFitnessDto'];
          'application/xml': components['schemas']['InVenueAggregatedFitnessDto'];
        };
      };
    };
  };
  /**
   * In Venue Aggregated Events
   * @description Get in venue aggregated events
   */
  getInVenueAggregatedEvents: {
    parameters: {
      query: {
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description In venue aggregated events */
      200: {
        content: {
          'application/json': components['schemas']['InVenueAggregatedEventsDto'];
          'application/xml': components['schemas']['InVenueAggregatedEventsDto'];
        };
      };
    };
  };
  /**
   * In Venue Aggregated Events
   * @description Get in venue aggregated events
   */
  getInVenueAggregatedEventsById: {
    parameters: {
      query?: {
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description In venue aggregated events */
      200: {
        content: {
          'application/json': components['schemas']['InVenueAggregatedEventsDto'];
          'application/xml': components['schemas']['InVenueAggregatedEventsDto'];
        };
      };
    };
  };
  /**
   * Injuries
   * @description Get a list of injured players
   */
  getInjuries: {
    parameters: {
      query?: {
        /** @description Person uuid */
        prsn?: string;
        /** @description Tournament Calendar */
        tmcl?: string;
        /** @description Contestant */
        ctst?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Injuries */
      200: {
        content: {
          'application/json': components['schemas']['InjuriesDto'];
          'application/xml': components['schemas']['InjuriesDto'];
        };
      };
    };
  };
  /**
   * Deletions
   * @description GET a list of either deleted matches, teams, or players according to the specified query parameter criteria
   */
  getDeletions: {
    parameters: {
      query?: {
        /** @description Type */
        type?: 'match' | 'team' | 'person';
        /** @description Delta */
        _dlt?: string;
        /** @description Page size */
        _pgSz?: number;
        /** @description Page Number */
        _pgNm?: number;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Deletions */
      200: {
        content: {
          'application/json': components['schemas']['DeletionsDto'];
          'application/xml': components['schemas']['DeletionsDto'];
        };
      };
    };
  };
  /**
   * Decode
   * @description Get UUID mappings for all entities in a sport
   */
  getDecode: {
    parameters: {
      query?: {
        /** @description Type */
        type?:
          | 'GroupFormat'
          | 'RoundFormat'
          | 'Eventtype'
          | 'Period'
          | 'Qualifier'
          | 'InjuryType'
          | 'RankStatus'
          | 'Broadcaster';
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Decode */
      200: {
        content: {
          'application/json': components['schemas']['DecodeDto'];
          'application/xml': components['schemas']['DecodeDto'];
        };
      };
    };
  };
  /**
   * Contestant Participation
   * @description Get Contestant Participation
   */
  getContestantParticipation: {
    parameters: {
      query?: {
        /** @description Active */
        active?: 'yes' | 'no';
        /** @description Contestants */
        ctst?: string[];
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Contestant Participation */
      200: {
        content: {
          'application/json': components['schemas']['ContestantParticipationDto'];
          'application/xml': components['schemas']['ContestantParticipationDto'];
        };
      };
    };
  };
  /**
   * Contestant Participation
   * @description Get Contestant Participation
   */
  getContestantParticipation_1: {
    parameters: {
      query?: {
        /** @description Active */
        active?: 'yes' | 'no';
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Contestant uuid */
        contestantUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Contestant Participation */
      200: {
        content: {
          'application/json': components['schemas']['ContestantParticipationDto'];
          'application/xml': components['schemas']['ContestantParticipationDto'];
        };
      };
    };
  };
  /**
   * Commentary
   * @description Get commentary
   */
  searchCommentary: {
    parameters: {
      query: {
        /** @description Type */
        type?: 'auto' | 'manual' | 'fallback';
        /** @description Fixture uuid */
        fx: string;
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Commentary */
      200: {
        content: {
          'application/json': components['schemas']['CommentaryDto'];
          'application/xml': components['schemas']['CommentaryDto'];
        };
      };
    };
  };
  /**
   * Commentary
   * @description Get commentary
   */
  getCommentaryById: {
    parameters: {
      query?: {
        /** @description Type */
        type?: 'auto' | 'manual' | 'fallback';
        /** @description Language */
        _lcl?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Fixture/match uuid */
        matchUuid: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Commentary */
      200: {
        content: {
          'application/json': components['schemas']['CommentaryDto'];
          'application/xml': components['schemas']['CommentaryDto'];
        };
      };
    };
  };
  /**
   * Areas
   * @description GET area(s) information
   */
  getAreas: {
    parameters: {
      query?: {
        /** @description Area UUID */
        area?: string;
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Areas */
      200: {
        content: {
          'application/json': components['schemas']['AreasDto'];
          'application/xml': components['schemas']['AreasDto'];
        };
      };
    };
  };
  /**
   * Area
   * @description GET area information
   */
  getAreas_1: {
    parameters: {
      query?: {
        /** @description Format */
        _fmt?: 'xml' | 'json' | 'jsonp';
        /** @description Mode */
        _rt?: 'b' | 'c';
        /** @description JSONP callback function */
        _clbk?: string;
      };
      path: {
        /** @description Area UUID */
        id: string;
        /** @description Outlet auth key */
        outletAuthKey: string;
      };
    };
    responses: {
      /** @description Area */
      200: {
        content: {
          'application/json': components['schemas']['AreasDto'];
          'application/xml': components['schemas']['AreasDto'];
        };
      };
    };
  };
}
